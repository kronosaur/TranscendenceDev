//	CDelaunayStargateGenerator.cpp
//
//	CDelaunayStargateGenerator class
//	Copyright (c) 2017 Kronosaur Productions, LLC. All Rights Reserved.

#include "PreComp.h"

CDelaunayStargateGenerator::CDelaunayStargateGenerator (CIntGraph &Graph, const TArray<CTopologyNode *> &Nodes) :
		m_Graph(Graph),
		m_Nodes(Nodes)

//	CDelaunayStargateGenerator constructor

	{
	}

void CDelaunayStargateGenerator::Generate (TArray<CTopologyNode::SStargateRouteDesc> &Routes, CTopologyNode::SStargateRouteDesc templateDesc)

//	Generate
//
//	Generate routes
//
//	LATER: This call alters the internal state so that we cannot call it again. 
//	In the future we should change the code in CIntGraph to generate an external
//	set of connections.

	{
	int i, j;

	//	Generate a Delaunay graph from all the nodes. This is a fully connected
	//	tessellation of all the nodes.

	m_Graph.GenerateDelaunayConnections();

	//	Now generate stargate routes for each connection

	for (i = 0; i < m_Nodes.GetCount(); i++)
		{
		CTopologyNode *pFrom = m_Nodes[i];

		TArray<DWORD> To;
		m_Graph.GetNodeForwardConnections(m_Graph.GetNodeID(i), &To);

		for (j = 0; j < To.GetCount(); j++)
			{
			CTopologyNode *pTo = m_Nodes[m_Graph.GetNodeIndex(To[j])];

			//	Create both stargates with autogenerated names

			CTopologyNode::SStargateRouteDesc *pRouteDesc = Routes.Insert();
			pRouteDesc->pFromNode = pFrom;
			pRouteDesc->pToNode = pTo;

			//	Initialize rest of the desc from the templateDesc

			pRouteDesc->sFromAttributes = templateDesc.sFromAttributes;
			pRouteDesc->sToAttributes = templateDesc.sToAttributes;
			pRouteDesc->sFromLocationCriteria = templateDesc.sFromLocationCriteria;
			pRouteDesc->dwFromBeaconType = templateDesc.dwFromBeaconType;
			pRouteDesc->dwFromGateType = templateDesc.dwFromGateType;
			pRouteDesc->sToLocationCriteria = templateDesc.sToLocationCriteria;
			pRouteDesc->dwToBeaconType = templateDesc.dwToBeaconType;
			pRouteDesc->dwToGateType = templateDesc.dwToGateType;
			pRouteDesc->rgbColor = templateDesc.rgbColor;
			}
		}
	}
