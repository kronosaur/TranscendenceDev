<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

	<Type unid="&unidDesignTypeTests;">
		<Events>
			<OnGlobalStartDiagnostics>
				(block (
					)
					;	Unit Tests for Properties

					(diagEval (list
						{	test:'(typ@ &unidTestBaseType; 'unid)					result:&unidTestBaseType;	}

						{	test:'(typ@ &unidTestBaseType; 'diag.def1)			result:17	}
						{	test:'(typ@ &unidTestBaseType; 'diag.def2)			result:'foo	}
						{	test:'(typ@ &unidTestBaseType; 'diag.def3)			result:5	}

						{	test:'(typ@ &unidTestDescendantType1; 'diag.def1)		result:17	}
						{	test:'(typ@ &unidTestDescendantType1; 'diag.const1)	result:34	}
						{	test:'(typ@ &unidTestDescendantType1; 'diag.const2)	result:4	}

						{	test:'(typ@ &unidTestDescendantType2; 'diag.def1)		result:17	}

						{	test:'(typ@ &unidTestBaseType; 'diag.global1)			result:54	}
						{	test:'(typ@ &unidTestDescendantType1; 'diag.global1)	result:54	}
						{	test:'(typ@ &unidTestDescendantType2; 'diag.global1)	result:54	}

						{	test:'(typInc@ &unidTestBaseType; 'diag.global2a)		result:1	}
						{	test:'(typInc@ &unidTestBaseType; 'diag.global2b 4)		result:4	}
						{	test:'(typInc@ &unidTestBaseType; 'diag.global2c -4.5)	result:-4.5	}

						{	test:'(typInc@ &unidTestBaseType; 'diag.global3)			result:9	}
						{	test:'(typInc@ &unidTestBaseType; 'diag.global3 5)		result:14	}
						{	test:'(typInc@ &unidTestBaseType; 'diag.global3 1.5)		result:15.5	}

						{	test:'(typInc@ &unidTestBaseType; 'diag.global4)			result:2.2	}
						{	test:'(typInc@ &unidTestBaseType; 'diag.global4 -2)		result:(+ 2.2 -2)	}
						{	test:'(typInc@ &unidTestBaseType; 'diag.global4 7.3)		result:7.5	}

						;	NOTE: a global property is unique for each type. That is, even though unidTestBaseType
						;	'diag.global2a has been set to 1, it does not affect its descendant type 
						;	(whose value is still Nil). Thus when we increment below we're still at 1.

						{	test:'(typInc@ &unidTestDescendantType1; 'diag.global2a)		result:1	}

						{	test:'(typSet@ &unidTestBaseType; 'diag.global2c 17)		result:True	}
						{	test:'(typSet@ &unidTestDescendantType1; 'diag.global2c 1)		result:True	}
						{	test:'(typ@ &unidTestDescendantType1; 'diag.global2c)		result:1	}
						{	test:'(typInc@ &unidTestDescendantType1; 'diag.global2c)		result:2	}

						{	test:'(setq gTestStation1 (sysCreateStation &stTestStation1; Nil))		result:'ignore	}
						{	test:'(obj@ gTestStation1 'diag.data1)				result:7	}
						{	test:'(objSet@ gTestStation1 'diag.data1 17)				result:True	}
						{	test:'(obj@ gTestStation1 'diag.data1)				result:17	}

						{	test:'(obj@ gTestStation1 'diag.data2)				result:11	}
						{	test:'(objSet@ gTestStation1 'diag.data2 -5)				result:True	}
						{	test:'(obj@ gTestStation1 'diag.data2)				result:-5	}

						{	test:'(objSet@ gTestStation1 'diag.global2a 'foo7)		result:True	}
						{	test:'(obj@ gTestStation1 'diag.global2a)				result:'foo7	}

						{	test:'(objSet@ gTestStation1 'diag.global2a 15)			result:True	}
						{	test:'(objInc@ gTestStation1 'diag.global2a 7)			result:22	}
						{	test:'(typ@ (objGetType gTestStation1) 'diag.global2a)	result:22	}
						{	test:'(obj@ gTestStation1 'diag.global2a)				result:22	}

						;	NOTE: custom properties should override built-in engine properties
						;	(otherwise, we might inadvertently break something when adding new
						;	engine properties.)
						{	test:'(setq gTestStation2 (sysCreateStation &stTestStation2; Nil))		result:'ignore	}
						{	test:'(typ@ &stTestStation2; 'canBeMined)				result:'testing	}
						{	test:'(obj@ gTestStation2 'canBeMined)					result:'testing	}
						{	test:'(obj@ gTestStation2 'maxStructuralHP)					result:100	}
						{	test:'(obj@ gTestStation2 'structuralHP)					result:100	}
						{	test:'(objSet@ gTestStation2 'structuralHP 10)					result:True	}
						{	test:'(obj@ gTestStation2 'structuralHP)				result:10	}
						{	test:'(objInc@ gTestStation2 'structuralHP 10)			result:20	}
						{	test:'(obj@ gTestStation2 'structuralHP)				result:20	}
						{	test:'(obj@ gTestStation2 'hitPoints)					result:70	}
						{	test:'(objInc@ gTestStation2 'hitPoints 10)				result:80	}
						))

					;	Unit Tests for Criteria

					(diagEval (list
						{	test:'(typMatches &itLaserCannon; "*")								result:True	}
						{	test:'(typMatches &itLaserCannon; "i")								result:True	}
						{	test:'(typMatches &itLaserCannon; "n")								result:Nil	}
						{	test:'(typMatches &itLaserCannon; "i L:1-10;")						result:True	}
						{	test:'(typMatches &itLaserCannon; "i L:2-10;")						result:Nil	}
						{	test:'(typMatches &itLaserCannon; "i L:2-;")						result:Nil	}
						{	test:'(typMatches &itLaserCannon; "i L:-10;")						result:Nil	}
						{	test:'(typMatches &itLaserCannon; "i +commonwealth;")				result:True	}
						{	test:'(typMatches &itLaserCannon; "i +corporate;")					result:Nil	}
						{	test:'(typMatches &itLaserCannon; "i -commonwealth;")				result:Nil	}
						{	test:'(typMatches &itLaserCannon; "i -corporate;")					result:True	}
						{	test:'(typMatches &itLaserCannon; "i +unid:&itLaserCannon;;")		result:True	}
						{	test:'(typMatches &itLaserCannon; "i +unid:&itRecoillessCannon;;")	result:Nil }
						{	test:'(typMatches &itLaserCannon; "i +damageType:laser;")			result:True }
						{	test:'(typMatches &itLaserCannon; "i +damageType:particle;")		result:Nil }

						{	test:'(typMatches &itLaserCannon; "i +property:cost;")				result:True }
						{	test:'(typMatches &itLaserCannon; "i +property:cost&gt;=100;")		result:True }
						{	test:'(typMatches &itLaserCannon; "i +property:cost&lt;=100;")		result:Nil }
						{	test:'(typMatches &itLaserCannon; "i +property:cost=380;")			result:True }
						{	test:'(typMatches &itLaserCannon; "i +property:cost=480;")			result:Nil }
						{	test:'(typMatches &itLaserCannon; "i +property:cost[:1000];")		result:True }
						{	test:'(typMatches &itLaserCannon; "i +property:cost[:10];")			result:Nil }
						{	test:'(typMatches &itLaserCannon; "i +property:cost[100:];")		result:True }
						{	test:'(typMatches &itLaserCannon; "i +property:cost[100:1000];")	result:True }
						{	test:'(typMatches &itLaserCannon; "i +property:cost[1000:2000];")	result:Nil }
						{	test:'(typMatches &itLaserCannon; "i +property:cost[0:10];")		result:Nil }
						{	test:'(typMatches &itLaserCannon; "i +property:cost[0:100];")		result:Nil }
						{	test:'(typMatches &itLaserCannon; "i +property:cost[300:400];")		result:True }

						{	test:'(typMatches &itLaserCannon; "i +property:cost[100-];")		result:True }
						{	test:'(typMatches &itLaserCannon; "i +property:cost[100-1000];")	result:True }
						{	test:'(typMatches &itLaserCannon; "i +property:cost[1000-2000];")	result:Nil }
						{	test:'(typMatches &itLaserCannon; "i +property:cost[0-10];")		result:Nil }
						{	test:'(typMatches &itLaserCannon; "i +property:cost[0-100];")		result:Nil }
						{	test:'(typMatches &itLaserCannon; "i +property:cost[300-400];")		result:True }

						{	test:'(typMatches &itLaserCannon; "i +property:cost[380];")			result:True }
						{	test:'(typMatches &itLaserCannon; "i +property:cost[379];")			result:Nil }
						{	test:'(typMatches &itLaserCannon; "i +property:cost[381];")			result:Nil }
						))
					)
			</OnGlobalStartDiagnostics>
		</Events>
	</Type>

<!-- TEST DESIGN TYPES -->

	<Type unid="&unidTestBaseType;">
		<Properties>
			<Definition id="diag.def1">17</Definition>
			<Definition id="diag.def2">"foo"</Definition>
			<Definition id="diag.def3">(+ 2 3)</Definition>
			<Definition id="diag.def4">{ a:'foo }</Definition>

			<Constant id="diag.const1">34</Constant>
			<Constant id="diag.const2">(+ 1 3)</Constant>

			<Global id="diag.global1">54</Global>
			<Global id="diag.global2a">Nil</Global>
			<Global id="diag.global2b">Nil</Global>
			<Global id="diag.global2c">Nil</Global>
			<Global id="diag.global3">8</Global>
			<Global id="diag.global4">1.2</Global>

			<Data id="diag.data1">7</Data>
		</Properties>
	</Type>

	<Type unid="&unidTestDescendantType1;"
			inherit="&unidTestBaseType;"
			>
	</Type>

	<Type unid="&unidTestDescendantType2;"
			inherit="&unidTestDescendantType1;"
			>
	</Type>

	<StationType UNID="&stTestStation1;"
			name=				"(flotsam)"
			sovereign=			"&svNeutral;"
			inherit=			"&unidTestBaseType;"

			scale=				"ship"
			mobile=				"true"
			mass=				"1"
			immutable=			"true"
			destroyWhenEmpty=	"true"
			noMapIcon=			"true"
			>
		<Properties>
			<Data id="diag.data2">11</Data>
		</Properties>
	</StationType>

	<StationType UNID="&stTestStation2;"
			name=				"(flotsam)"
			sovereign=			"&svNeutral;"
			inherit=			"&unidTestBaseType;"

			scale=				"ship"
			mobile=				"true"
			mass=				"1"
			noMapIcon=			"true"

			armorID=			"&itReinforcedTitanium1;"
			structuralHitPoints="100"
			>
		<Properties>
			<Global id="canBeMined">'testing</Global>

			<Data id="hitPoints">70</Data>
		</Properties>
	</StationType>

</TranscendenceModule>
