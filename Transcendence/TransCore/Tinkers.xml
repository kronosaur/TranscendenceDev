<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

<!-- Tinker's Guild

-->
	
	<Sovereign UNID="&svTinkers;"
			name=":the Tinkers Guild"
			shortName=":the Tinkers"
			adjective="Tinker"
			demonym=":a Tinker(s)"
			plural="true"

			alignment="constructive chaos"
			>
		<GlobalData>
			<Recipes>
				(
					{ item:&itYoroiS500;				enhancement:"+hpBonus:thermo:100"	components:( { item:&itHolmiumFiber; count:4 } { item:&itYoroiS100; count:2 } )	extraCost:0 }
					{ item:&itSuperconductingShields;	enhancement:"+resistMatter:66"		components:( { item:&itSuperconductingCoil; count:4 } { item:&itHeavySungArmor; count:2 } )	extraCost:0 }
					{ item:&itCyclotronDeflectorIV;		enhancement:"+resistDamageClass:blast:66"	components:( { item:&itBlastUpgrade; count:1 } { item:&itCyclotronDeflectorIII; count:2 })	extraCost:0 }
					{ item:&itSolonShieldGenerator;		enhancement:"+hpBonus:blast:100"	components:( { item:&itMonopoleDeflector; count:2 })	extraCost:0 }
					
					{ item:&itOrthoSteel;				enhancement:"+regen"				components:( { item:&itDuralloyOre; count:4 } { item:&itOrthoSteelOre; count:4 })	extraCost:0 }
					{ item:&itHeavyBlastPlate;			enhancement:"+hpBonus:ion:100"		components:( { item:&itUrakArmorHeavy; count:2 } { item:&itPteracniumOre; count:4 })	extraCost:0 }
					{ item:&itDuralloyArmor;			enhancement:"+immunity:EMP"			components:( { item:&itNeodymiumMagnet; count:2 } { item:&itDuralloyOre; count:4 })	extraCost:0 }
					{ item:&itStealthPlate;				enhancement:"+regen"				components:( { item:&itDuralloyOre; count:3 } { item:&itHyperfiberRoll; count:4 })	extraCost:0 }
					{ item:&itLightBlastPlate;			enhancement:"+reflect:particle"		components:( { item:&itDwargChitonArmor; count:1 } { item:&itCeralloyOre; count:4 })	extraCost:0 }
					{ item:&itCeralloyArmor;			enhancement:"+immunity:ionEffects"	components:( { item:&itHyperfiberRoll; count:2 } { item:&itCeralloyOre; count:4 })	extraCost:0 }
					{ item:&itAdvancedReactiveArmor;	enhancement:"+hpBonus:particle:100"	components:( { item:&it400HexageneMAG; count:2 } { item:&itPlasteelOre; count:6 })	extraCost:0 }
					{ item:&itSolarArmor;				enhancement:"+reflect:laser"		components:( { item:&itLanthanumGlass; count:1 } { item:&itPalladiumOre; count:3 })	extraCost:0 }
					
					{ item:&itDualMarkIIIHowitzer;		enhancement:Nil						components:( { item:&itMakayevBlastEnhancer; count:1 } { item:&itMarkIIIHowitzer; count:2 })	extraCost:0 }
					{ item:&itOmniXRayLaserCannon;		enhancement:Nil						components:( { item:&itXRayLaserCannon; count:1 } { item:&itOmniLaserCannon; count:1 })	extraCost:0 }
					{ item:&itSlamCannon;				enhancement:"+speed:70"				components:( { item:&itMakayevLauncher; count:1 } { item:&itSlamCannon; count:1 })	extraCost:0 }
					{ item:&itDualTurbolaserCannon;		enhancement:Nil						components:( { item:&itTurbolaserCannon; count:4 })	extraCost:0 }
					{ item:&itWasteCannon;				enhancement:Nil						components:( { item:&itRadioactiveWaste; count:8 })	extraCost:0 }
					{ item:&itAmmoBoxXM900;				enhancement:Nil						components:( { item:&itFusionTrigger; count:1 })	extraCost:0 }
					
					{ item:&itArmorRepairDevice;		enhancement:Nil						components:( { item:&itRepairingNanos; count:6 })	extraCost:0 }
					)
			</Recipes>
		</GlobalData>
	</Sovereign>

	<SystemMap unid="&smTinkerSpace;"
			displayOn="&smHumanSpace;"
			>
		<TopologyProcessor priority="secondaryColony">
			<System criteria="+newBeyond;"		attributes="tinkerSpace"/>
			<System criteria="+ungoverned;"		attributes="tinkerSpace"/>
		</TopologyProcessor>
	</SystemMap>

<!-- ENCOUNTERS -->

	<!-- Tinker Gathering -->

	<StationType UNID="&stTinkerGathering;"
			name=				"Tinker gathering"
			sovereign=			"&svTinkers;"
				 
			attributes=			"envEarth, envAvoidsAir, friendly, generic, human, independent, majorStation, populated, tinkers"
				 
			dockScreen=			"Main"
			abandonedScreen=	"&dsRPGAbandonedStation;"

			level=				"5"
			size=				"110"
			armorID=			"&itReinforcedTitanium1;"
			hitPoints=			"250"
			regen=              "2"
			multiHull=			"true"
			fireRateAdj=		"20"
				 
			explosionType=		"&vtBlastExplosion2;"
			ejectaType=			"&vtWreckEjecta;"
			>

		<Properties>
			<!--
			By default we accept any military ID (even ones from APD or ED),
			but we do not check illegals.
			-->
			<Definition	id="rpg.checkMilitaryID">	"* +militaryID;"</Definition>
			<Definition id="rpg.checkIllegals">		Nil</Definition>
		</Properties>

		<!-- Encounter Info -->

		<Encounter
				systemCriteria=			"+tinkerSpace;"
				systemAffinity=			"+envEarth; -envAir;"
				levelFrequency=			"uccuu r---- ----- ----- -----"

				locationCriteria=		"+asteroids, -asteroidbelt"
				enemyExclusionRadius=	"50"

				unique=					"inSystem"
				/>

		<Names noArticle="true">

			Tinker Alvarez; Tinker Anand; Tinker Bell; Tinker Brill; 
			Tinker Curie; Tinker Cray; Tinker Draper; Tinker Edison; 
			Tinker Fermi; Tinker Goddard; Tinker Hale; Tinker Hopper; 
			Tinker Hypatia; Tinker Julian; Tinker Kroll; Tinker Kwolek; 
			Tinker Lawrence; Tinker Lovelace; Tinker Mazor; Tinker Noyce; 
			Tinker Olsen; Tinker Orban; Tinker Plank; Tinker Rohrer; 
			Tinker Sikorsky; Tinker Telkes; Tinker Tesla; 
			Tinker Tsiolkovsky; Tinker Vorster; Tinker Wang;

		</Names>
		
		<!-- Trade and Items -->
		
		<Trade currency="credit">
			<Sell	criteria="*U -Illegal; -ID; -NotForSale;"	priceAdj="100"/>
			<Buy	criteria="*DU -Illegal; -ID; -NotForSale;"	priceAdj="100"/>
			<Buy	criteria="*DU -Illegal; -ID;"				priceAdj="50"/>
			
			<Refuel			criteria="f +BasicFuel; L:1-8;" priceAdj="100"/>
			<RepairArmor	criteria="a L:1-8;" priceAdj="100"/>
			<ReplaceArmor	criteria="a L:1-8;" priceAdj="100"/>
			<InstallDevice	criteria="d L:1-8;" priceAdj="100"/>
			<RemoveDevice	criteria="d L:1-8;" priceAdj="100"/>
		</Trade>
		
		<Items>
			<RandomItem count="3d6" 
					criteria=		"aswd -Illegal; -Military; -NotStandard; -NotForSale;"
					level=			"3"
					levelCurve=		"2"
					damaged=		"100"
					/>
		</Items>

		<!-- Configuration -->
		
		<Devices>
			<Device deviceID="&itFlenserCannon;"	omnidirectional="true"/>
		</Devices>
		
		<!-- Ships and Defenses -->

		<Ships>
			<Lookup count="1d4" table="&tbCommDefenders;"/>
			<Lookup count="1d2" table="&tbCommPrivateCrafts;"/>
		</Ships>

		<Reinforcements minShips="5">
			<Table>
				<Lookup chance="75" table="&tbCommDefenders;"/>
				<Lookup chance="25" table="&tbCommPrivateCrafts;"/>
			</Table>
		</Reinforcements>
		
		<!-- Image and Effects -->
		
		<ImageVariants>
			<Image	imageID="&rsTinkerStations;" imageX="0"   imageY="0"   imageWidth="130" imageHeight="130"/>
			<Image	imageID="&rsTinkerStations;" imageX="0"   imageY="130" imageWidth="130" imageHeight="130"/>
		</ImageVariants>

		<DockingPorts>
			<Port x="0"		y="90" />
			<Port x="0"		y="-90" />
			<Port x="60"	y="60" />
			<Port x="60"	y="-60" />
			<Port x="90"	y="0" />
			<Port x="-90"	y="0" />
			<Port x="-60"	y="60" />
			<Port x="-60"	y="-60" />
		</DockingPorts>
		
		<!-- Dock Screens -->
		
		<DockScreens>
			<Main>
				<Panes>
					<Default descID="descWelcome">
						<Actions>
							<Action id="actionBuyScrap" default="1">
								(scrShowScreen gScreen &dsRPGCommoditiesExchangeBuy;)
							</Action>

							<Action id="actionSellScrap">
								(scrShowScreen gScreen &dsRPGCommoditiesExchangeSell;)
							</Action>

							<Action id="actionCustomWork">
								(if (objGetData gSource 'customIntroDone)
									(scrShowScreen gScreen &dsTinkerCustomWork; {
										criteria: "* +hasComponents:true; +tinkers;"
										})
									(scrShowPane gScreen "CustomWorkIntro")
									)
							</Action>

							<Action id="actionDockServices">
								(rpgDockServices gPlayerShip)
							</Action>

							<Action id="actionUndock" cancel="1">
								<Exit/>
							</Action>
						</Actions>
					</Default>
						
					<CustomWorkIntro descID="descCustomWorkIntro">
						<Actions>
							<Action id="actionContinue" default="1" cancel="1">
								(block Nil
									(objSetData gSource 'customIntroDone True)
									(scrShowPane gScreen "Default")
									(scrShowScreen gScreen &dsTinkerCustomWork; {
										criteria: "* +hasComponents:true; +tinkers;"
										})
									)
							</Action>
						</Actions>
					</CustomWorkIntro>
				</Panes>
			</Main>

			<Decon>
				<Panes>
					<Default>
						<OnPaneInit>
							(block (
								; Figure out how much it would cost to make the ship immune to radiation
								(cost (* 400 (shpGetArmorCount gPlayerShip)))
								)

								(if (geq (plyGetCredits gPlayer) cost)
									(scrSetDescTranslate gScreen 'descDecon { cost:(fmtCurrency 'credit cost) })
									(scrSetDescTranslate gScreen 'descDeconCantAfford)
									)
								(scrSetData gScreen 'deconCost cost)
								(scrEnableAction gScreen 'actionDecon (geq (plyGetCredits gPlayer) cost))
								)
						</OnPaneInit>

						<Actions>
							<Action id="actionDecon" default="1">
								(block (
									(cost (scrGetData gScreen 'deconCost))
									(armorEnhanced 0)
									)
									;	Decontaminate
									(plyCharge gPlayer cost)
									(shpDecontaminate gPlayerShip)

									;	Make immune
									(objEnumItems gPlayerShip "aI" theItem
										(block (result)
											(setq result (shpEnhanceItem gPlayerShip theItem {
												enhancement: "+immunity:radiation"
												type: &itRadiationImmuneCoating;
												}))

											(switch
												(or (eq result 0) (eq result 2) (eq result 6) (eq result 7))
													(setq armorEnhanced (add armorEnhanced 1))
												)
											)
										)

									;	Compose the result
									(switch
										(= armorEnhanced (shpGetArmorCount gPlayerShip))
											(scrSetData gScreen 'deconResult 'descDeconImmune)

										(= armorEnhanced 0)
											(scrSetData gScreen 'deconResult 'descDeconNotImmune)

										(scrSetData gScreen 'deconResult 'descDeconPartialImmune)
										)

									(scrShowPane gScreen "DeconDone")
									)
							</Action>

							<Action id="actionUndock" cancel="1">
								(scrExitScreen gScreen 'forceUndock)
							</Action>
						</Actions>

					</Default>

					<DeconDone>
						<OnPaneInit>
							(scrSetDescTranslate gScreen (scrGetData gScreen 'deconResult))
						</OnPaneInit>

						<Actions>
							<Action id="actionContinue" default="1" cancel="1">
								(scrShowScreen gScreen "Main")
							</Action>
						</Actions>
					</DeconDone>
				</Panes>
			</Decon>
		</DockScreens>
		
		<!-- Events and Behavior -->

		<StaticData>
			<CustomWork>
				(
					(&itTitaniumOre;		2	&itLightTitaniumArmor;)
					(&itHeavyWater;			4	&itLightXMHArmor;)
					(&itSiliconArmorPatch;	4	&itPhotorepairArmor;)
					(&itCarbonSpool;		2	&itHeavyCeramicPlate;)
					(&itPlasteelOre;		4	&itPlasteelPlate;)
					(&itHyperfiberRoll;		4	&itLightTevlarArmor;)
					(&itDuralloyOre;		5	&itDuralloyArmor;)
					(&itReactiveArmor;		4	&itAdvancedReactiveArmor;)
					(&itCeralloyOre;		5	&itCeralloyArmor;)
					(&itOrthoSteelOre;		10	&itOrthoSteel;)

					(&itClass1Deflector;	4	&itSolonShieldGenerator;)
					(&itClass2Deflector;	2	&itSolonShieldGenerator;)
					(&itSuperconductingCoil; 8	&itSuperconductingShields;)

					(&itRecoillessCannon;	4	&itDualRecoillessCannon;)
					(&itLaserCannon;		8	&itLaserArray;)
					(&itPartisanCannon;		2	&itSmartCannon;)
					(&itTurbolaserCannon;	4	&itDualTurbolaserCannon;)
					(&itRadioactiveWaste;	8	&itWasteCannon;)
					(&itFusionTrigger;		1	&itXM900Missile;)

					(&itRepairingNanos;		6	&itArmorRepairDevice;)
					)
			</CustomWork>
		</StaticData>

		<Events>
			<GetDockScreen>
				; If the ship is radioactive then we need to decontaminate
				(if (and (shpIsRadioactive gPlayerShip)
						(not (objIsAbandoned gSource))
						)
					(list "Decon" 10)
					Nil
					)
			</GetDockScreen>
		</Events>
		
		<Language>
			<Text id="actionBuyScrap">[B]uy Scrap</Text>
			<Text id="actionCustomWork">[C]ustom Work</Text>
			<Text id="actionDockServices">[D]ock Services</Text>
			<Text id="actionSellScrap">[S]ell Scrap</Text>
			<Text id="actionDecon">[D]econtaminate</Text>
			<Text id="actionContinue">[C]ontinue</Text>
			<Text id="actionUndock">[U]ndock</Text>
			
			<Text id="descWelcome">
				You are docked at a station belonging to the Tinkers Guild.
				The docking bay is decorated with various ancient devices of
				unknown origin and purpose.
			</Text>
			<Text id="descCustomWorkIntro">
				You're in a machine shop surrounded by moving autowelders and
				cutters. A dark-skinned woman stands amid the chaos holding a
				datapad.

				"We have a list of items we can fabricate for you. You'll need
				to provide the required scrap items or raw materials plus
				fabrication cost."
			</Text>

			<Text id="descDecon">
				A woman in a hazmat suit meets you at the airlock.

				"Seriously, your ship is pretty toxic. Do you want us to take
				care of it? We can fix it for %cost%."
			</Text>
			<Text id="descDeconCantAfford">
				A woman in a hazmat suit meets you at the airlock.

				"Ugh, your ship is pretty toxic. Please come back after you've
				deconned!"
			</Text>
			<Text id="descDeconImmune">
				The woman in the hazmat suit decontaminates your ship with
				various robots. She applies borocarbide paste to your ship.

				"The new borocarbide coating will make your ship immune to
				radiation."
			</Text>
			<Text id="descDeconPartialImmune">
				The woman in the hazmat suit decontaminates your ship with
				various robots. She applies borocarbide paste to your ship.

				"I tried to make your ship immune to radiation, but it didn't
				fully work. You must have some other coatings on your armor."
			</Text>
			<Text id="descDeconNotImmune">
				The woman in the hazmat suit decontaminates your ship with
				various robots. She applies borocarbide paste to your ship.

				"I tried to make your ship immune to further contamination, but
				it didn't take. You must have some other coatings on your armor."
			</Text>

			<Text id="rpg.stationWillNotBuy">

				%StationName% buys damaged items. We are not 
				interested in buying %itemName%.

			</Text>
			<Text id="core.mapDesc">
				Fabricates special items &mdash; Repairs/installs armor up to level 8 &mdash; Buys and sells scrap
			</Text>
		</Language>
	</StationType>
	
<!-- ITEMS -->
	
	<!-- Ammo Box, XM900 -->

	<ItemType UNID="&itAmmoBoxXM900;"
			name=				":an XM900 ammunition box(es)"
			level=				"7"
			value=				"2900"
			mass=				"2500"
			frequency=			"notRandom"
			attributes=			"ammoBox, commonwealth, consumable, military"

			description=		"This box contains 24 XM900 Lucifer missiles."
			>

		<Image imageID="&rsItems1;" imageX="0" imageY="384" imageWidth="96" imageHeight="96"/>

		<Invoke>
			(intAmmoBoxOpen (itmCreate &itXM900Missile; 24))
		</Invoke>
	</ItemType>

	<!-- Dual Mark III Howitzer -->

	<ItemType UNID="&itDualMarkIIIHowitzer;"
			name=				"dual mark III howitzer"
			attributes=			"cannotOrder, commonwealth, howitzer, majorItem, makayev, tinkers"

			level=				"7"
			value=				"47000"
			mass=				"10000"
			frequency=			"notRandom"
			numberAppearing=	"1"

			description=		"The Tinkers Guild has developed a technique for combining two mark III howitzers."
			>

		<Image imageID="&rsItemsMakayev3;" imageX="192" imageY="192" imageWidth="96" imageHeight="96"/>

		<Weapon
				type=				"missile"

				configuration=		"dual"
				damage=				"blast:8d12; momentum3; WMD4"
				fireRate=			"40"
				missileSpeed=		"50"
				lifetime=			"120"
				powerUse=			"720"
				recoil=				"4"

				effect=				"&efBlastShellDefault;"
				sound=				"&snRecoillessCannon;"
				>
		</Weapon>
	</ItemType>

	<!-- Omni X-Ray laser cannon -->

	<ItemType UNID="&itOmniXRayLaserCannon;"
			name=				"omnidirectional x-ray laser"
			attributes=			"bushido, cannotOrder, commonwealth, energyWeapon, majorItem, tinkers"
			  
			level=				"5"
			value=				"10000"
			mass=				"2500"
			frequency=			"notRandom"

			description=		"The Tinkers Guild designed this nuclear-powered laser mounted on an omnidirectional turret."
			>

		<Image imageID="&rsItemsBushido1;" imageX="192" imageY="96" imageWidth="96" imageHeight="96"/>

		<Weapon
				type=				"beam"

				omnidirectional=	"true"
				damage=				"laser:8d4"
				fireRate=			"16"
				lifetime=			"30"
				powerUse=			"200"

				effect=				"&efLaserBeamDefault;"
				sound=				"&snLaserCannon;"
				>
		</Weapon>
	</ItemType>

	<ItemType UNID="&vtTinkerEnhancement;"
			name=				"Tinker enhancement"
			virtual=			"true"
			level=				"1"
			>
		<Image imageID="&rsTinkerStations;" imageX="0"   imageY="0"   imageWidth="130" imageHeight="130"/>
	</ItemType>

<!-- DOCK SCREENS -->
	
	<DockScreen UNID="&dsTinkerCustomWork;"
			type=           "customItemPicker"
			inherit=		"&dsDockScreenBase;"
			nestedScreen=   "true"
			>
		<Display type="customItemPicker"
				displayActual="true"
				>
			(block (
				(criteria (or (@ gData 'criteria) "* +hasComponents:true;"))
				)
				(append
					;	Items with component definitions
					(map (itmGetTypes criteria) 'excludeNil theType
						(itmCreate theType 1)
						)

					;	Global Tinker recipes
					(map (typGetData &svTinkers; 'Recipes) 'excludeNil theRecipe
						(itmSetData (tinkerCreateItem theRecipe 1) 'recipe theRecipe)
						)
					)
				)
		</Display>
		
		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(theItem (scrGetItem gScreen))
						(theRecipe (itmGetData theItem 'recipe))
						(fabInfo (if theRecipe
							(tinkerCalcFabrication theRecipe)
							(rpgCalcCreateFromComponents theItem gPlayerShip gSource)
							))
						(workCost (@ fabInfo 'workCost))
						(currencyUsed (@ fabInfo 'currencyUsed))
						(maxCount (@ fabInfo 'maxCount))

						;	Data for error conditions
						(itemNeeded (or (@ (@ fabInfo 'componentsMissing) 0) (@ (@ fabInfo 'componentsLacking) 0)))
						(errorDesc {
							item: itemNeeded
							itemCount: (itmGetCount itemNeeded)
							itemName: (itmGetName itemNeeded 'actual)
							itemNames: (itmGetName itemNeeded '(actual plural))
							itemNamesShort: (itmGetName itemNeeded '(actual plural short))
							})
						desc
						)

						;	Set the description of the selected item
						
						(switch
							(not theItem)
								(scrSetDescTranslate gScreen 'descFabricateNoItems)
							
							(not (@ fabInfo 'componentsNeededDesc))
								(scrSetDescTranslate gScreen 'descFabricateItemNoComponents {
									itemName: (itmGetName theItem '(actual count))
									cost: (fmtCurrency currencyUsed workCost)
									})

							(scrSetDescTranslate gScreen 'descFabricateItem {
								itemName: (itmGetName theItem '(actual count))
								cost: (fmtCurrency currencyUsed workCost)
								})
							)

						;	Set the list of components

						(scrSetControlValue gScreen 'componentsNeeded (@ fabInfo 'itemListDisplay))

						;	Generate an error descriptor, if we can't fabricate even a single item

						(switch
							(not theItem)
								Nil

							(@ fabInfo 'componentsMissing)
								(scrSetControlValue gScreen 'descError
									(scrTranslate gScreen 'errorComponentMissing errorDesc)
									)

							(and (@ fabInfo 'componentsLacking) (= (@ errorDesc 'itemCount) 1))
								(scrSetControlValue gScreen 'descError
									(scrTranslate gScreen 'errorComponentLacking errorDesc)
									)

							(@ fabInfo 'componentsLacking)
								(scrSetControlValue gScreen 'descError
									(scrTranslate gScreen 'errorComponentsLacking errorDesc)
									)

							(leq (plyGetCredits gPlayer) (@ fabInfo 'workCost))
								(scrSetControlValue gScreen 'descError
									(scrTranslate gScreen 'errorMoneyLacking)
									)

							(@ fabInfo 'noCargoSpace)
								(scrSetControlValue gScreen 'descError
									(scrTranslate gScreen 'errorCargoSpace)
									)
							)

						;	Remember the recipe, the components, and the cost for later
						(scrSetData gScreen 'fabInfo fabInfo)

						;	Disable Fabricate action if we can't do it
						
						(scrEnableAction gScreen 'actionFabricate (gr maxCount 0))
						(scrEnableAction gScreen 'actionReminder theItem)
						)
				</OnPaneInit>

				<Controls>
					<Text id="desc"/>
					<ItemListDisplay id="componentsNeeded"	showActualItem="true"/>
					<Text id="descError"/>
				</Controls>

				<Actions>
					<Action id="actionFabricate" default="1">
						(block (
							(fabInfo (scrGetData gScreen 'fabInfo))
							)

							(if (gr (@ fabInfo 'maxCount) 1)
								(scrShowPane gScreen "FabricateCount")

								(block Nil
									(scrSetData gScreen 'result
										(rpgCreateFromComponents fabInfo gPlayerShip gSource 1 {
											reminderCriteria: "aS +unid:&msTinkerReminder;;"
											})
										)
									(scrShowPane gScreen "FabricateResult")
									)
								)
							)
					</Action>
					
					<Action id="actionReminder">
						(block (
							(fabInfo (scrGetData gScreen 'fabInfo))
							theMission
							)

							(setq theMission (msnCreate &msTinkerReminder; gSource {
								fabInfo: fabInfo
								destID: (objGetID gSource)
								}))
								
							(if theMission
								(msnAccept theMission)
								)
								
							(scrShowPane gScreen "MissionAdded")
							)
					</Action>
					
					<Action id="actionDone" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
			
			<FabricateCount
					showCounter=	"true"
					>
				<OnPaneInit>
					(block (
						(fabInfo (scrGetData gScreen 'fabInfo))
						)
						(scrSetDescTranslate gScreen 'descFabricateCount)
						(scrSetCounter gScreen (@ fabInfo 'maxCount))
						)
				</OnPaneInit>
			
				<Actions>
					<Action id="actionFabricate" default="1">
						(block (
							(fabInfo (scrGetData gScreen 'fabInfo))
							(count (scrGetCounter gScreen))
							)
							(switch
								(gr count (@ fabInfo 'maxCount))
									(scrSetCounter gScreen (@ fabInfo 'maxCount))

								(leq count 0)
									(scrShowPane gScreen "Default")

								(block Nil
									(scrSetData gScreen 'result
										(rpgCreateFromComponents fabInfo gPlayerShip gSource count {
											reminderCriteria: "aS +unid:&msTinkerReminder;;"
											})
										)
									(scrShowPane gScreen "FabricateResult")
									)
								)
							)
					</Action>
					
					<Action id="actionCancel" cancel="1">
						(scrShowPane gScreen "Default")
					</Action>
				</Actions>
			</FabricateCount>
				
			<FabricateResult
					noListNavigation="true"
					>
				<OnPaneInit>
					(block (
						(theResult (scrGetData gScreen 'result))
						)
						(scrSetDescTranslate gScreen 'descFabricateResult {
							itemCreated: (itmGetName (@ theResult 'itemsCreated) 0x08)
							itemsConsumed: (or (strItemList (@ theResult 'itemsConsumed) 0x08) "None")
							totalCost: (fmtCurrency (@ theResult 'currencyUsed) (@ theResult 'totalCost))
							})
						)
				</OnPaneInit>
			
				<Actions>
					<Action id="actionDone" default="1" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</FabricateResult>
			
			<MissionAdded
					noListNavigation="true"
					>
				<OnPaneInit>
					(block (
						(fabInfo (scrGetData gScreen 'fabInfo))
						)

						(scrSetDescTranslate gScreen 'descFabricateReminderAdded {
							itemName: (itmGetName (@ fabInfo 'item) '(actual count))
							})
						)
				</OnPaneInit>
				
				<Actions>
					<Action id="actionDone" default="1" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</MissionAdded>
		</Panes>
		
		<Language>
			<Text id="actionFabricate">[F]abricate</Text>
			<Text id="actionReminder">[R]emember for Later</Text>

			<Text id="descFabricateNoItems">
				Unfortunately, you do not have any required components.
			</Text>
			<Text id="descFabricateItem">
				To fabricate %itemName% we need %cost% plus the following components:
			</Text>
			<Text id="descFabricateItemNoComponents">
				To fabricate %itemName% we charge %cost%.
			</Text>
			<Text id="descFabricateReminderAdded">
				A reminder has been added to your mission computer. Once you obtain
				the necessary items you may return here to fabricate %itemName%.
			</Text>
			<Text id="descFabricateCount">
				How many items do you wish to fabricate?
			</Text>
			<Text id="descFabricateResult">
				After much work with the robots the woman returns with her creation:
				"Nothing to it once you know how these machines work."

				Fabricated: %itemCreated%.\n
				Consumed: %itemsConsumed%.\n
				Total Cost: %totalCost%.
			</Text>

			<Text id="errorComponentLacking">
				Unfortunately, you need one more %itemName%.
			</Text>
			<Text id="errorComponentsLacking">
				Unfortunately, you need %itemCount% more %itemNames%.
			</Text>
			<Text id="errorComponentMissing">
				Unfortunately, you do not have any %itemNamesShort%.
			</Text>
			<Text id="errorMoneyLacking">
				Unfortunately, you do not have enough credits.
			</Text>
			<Text id="errorCargoSpace">
				Unfortunately, you do not have enough cargo space.
			</Text>
		</Language>
	</DockScreen>
	
<!-- MISSIONS -->
	
	<!-- Tinker Reminder =======================================================

	EXTRA DATA
	
	recipe:				The item and recipe
	components:			The components needed to fabricate the item.
	cost:				The cost to fabricate per item.

	======================================================================== -->
	
	<MissionType UNID="&msTinkerReminder;"
			name=				"Tinkers 01: Reminder"
			attributes=			"tinkers"

			level=				"1-10"

			allowPlayerDelete=	"true"
			noDebrief=			"true"
			noInProgress=		"true"
			noStats=			"true"
			>

		<Image	imageID="&rsTinkerStations;" imageX="0"   imageY="0"   imageWidth="130" imageHeight="130"/>

		<Events>
			<OnCreate>
				(block Nil
					;	Store the parameters of the mission
					
					(msnSetData gSource 'forgeInfo (@ gData 'fabInfo))
					
					;	Remember the current system and the station that offered
					;	the mission.
					
					(msnSetData gSource 'destID (@ gData 'destID))
					(msnSetData gSource 'destSystem (sysGetNode))
					)
			</OnCreate>

			<OnSetPlayerTarget>
			</OnSetPlayerTarget>
		</Events>
		
		<Language>
			<!-- Code Points -->

			<Text id="Summary">
				(block (
					(forgeInfo (msnGetData gSource 'forgeInfo))
					)
					(cat
						(msnTranslate gSource 'textSummary {
							itemsNeeded: (@ forgeInfo 'componentsNeededDesc)
							item: (itmGetName (@ forgeInfo 'item) 0x108)
							})
						"\n\n"

						"System: " (sysGetName (msnGetData gSource 'destSystem))
						)
					)
			</Text>

			<!-- Text -->

			<Text id="Name">
				Find components for Tinker fabrication
			</Text>
			<Text id="textSummary">
				Acquire %itemsNeeded% to have the Tinkers fabricate %item%.
			</Text>
			<Text id="FailureMsg"></Text>
		</Language>
	</MissionType>

<!-- GLOBAL FUNCTIONS ==========================================================

-->

	<Globals>
		(block Nil
			(setq tinkerCalcFabrication (lambda (theRecipe theSource theFoundry)
				(block (
					(theItem (tinkerCreateItem theRecipe 1))
					(currencyUsed (objGetProperty (or theFoundry gSource) 'currency))

					;	Describe the components needed
					(theComponents
						(map (@ theRecipe 'components) theDesc
							(itmCreate (@ theDesc 'item) (@ theDesc 'count))
							)
						)

					;	Compute the total price of the components
						
					(componentPrice
						(map theComponents 'reduceSum theComponent
							;	For devices we assume a damaged device
							(if (itmMatches theComponent "d")
								(* (itmGetCount theComponent) (itmGetPrice (itmSet@ theComponent 'damaged True) currencyUsed))
								(* (itmGetCount theComponent) (itmGetPrice theComponent currencyUsed))
								)
							)
						)
						

					(markUp (@ theRecipe 'markUp))
					(workPrice
						(switch
							;	If markUp is an integer, assume it is the cost of the work
							;	as a percent of the component cost. E.g., 10 = 10% of component
							;	cost.
							(and markUp (= (typeof markUp) 'int32))
								(int (round (* componentPrice (/ markUp 100))))

							;	Otherwise, we expect a double such that 0.1 = 10% of component
							;	cost.
							markUp
								(int (round (* componentPrice markUp)))

							;	Otherwise default tinker calculation where  total cost of the work
							;	compensates for any difference between the input and output prices.
							(max 50 (intRoundUp (- (itmGetPrice theItem) componentPrice) 25))
							)
						)
					(workCost
						(or
							;	Recipe totalCost will override any other calculations
							(@ theRecipe 'totalCost)

							;	Otherwise add extraCost to the calculated price
							(+ workPrice (@ theRecipe 'extraCost))
							)
						)

					;	For each required component, add up the number of items the player
					;	actually has. Note that we accept damaged items.
						
					(availableComponents
						(map theComponents theComponent
							(block (
								(componentsAvail (rpgCalcComponentsAvailable (or theSource gPlayerShip) theComponent))
								)
								{
									item: theComponent
									available: (@ componentsAvail 'availCount)
									}
								)
							)
						)
					
					;	Figure out how much cargo space we need for each item
					(spaceNeeded
						(-
							(* (itmGetMass theItem) (itmGetCount theItem))
							(map theComponents 'reduceSum theComponent
								(* (itmGetMass (@ theComponent 'item)) (@ theComponent 'count))
								)
							)
						)
					(maxCountSpace
						(if (gr spaceNeeded 0)
							(int (/ (objGetCargoSpaceLeft (or theSource gPlayerShip)) spaceNeeded))
							1000
							)
						)

					;	Figure out the maximum number of items we could create
						
					(maxCountPrice
						(if (gr workCost 0)
							(int (/ (objGetBalance (or theSource gPlayerShip) currencyUsed) workCost))
							1000
							)
						)

					;	Now compute the max count based on component availability

					(maxCount
						(min maxCountSpace maxCountPrice
							(if availableComponents
								(map availableComponents 'reduceMin theEntry
									(int (/ (@ theEntry 'available) (itmGetCount (@ theEntry 'item))))
									)
								1000
								)
							)
						)
					)

					;	Return a structure describing various aspects of the fabrication
					
					{
						item: theItem
						recipe: theRecipe
						
						;	This is a list of items (with counts) required to fabricate.
						
						componentsNeeded: theComponents
						componentsNeededDesc: (strItemList theComponents 0x0108)
						
						;	These fields determine various prices
						
						componentCost: componentPrice
						currencyUsed: currencyUsed
						workCost: workCost
						
						;	This is a list of structures describing what components the
						;	player has available. Each struct has two fields:
						;
						;	item: One of the items required (with counts)
						;	available: The number of this item the player has (including
						;		damaged.
						
						componentsAvail: availableComponents
						
						;	This is a structure suitable for an ItemListDisplay control

						itemListDisplay:
							(map availableComponents 'excludeNil theEntry
								{
									item: (@ theEntry 'item)
									enabled: (geq (@ theEntry 'available) (itmGetCount (@ theEntry 'item)))
									}
								)

						;	Maximum number of items we can fabricate
						
						maxFabCount: maxCount
						maxCount: maxCount
						
						;	Missing components
						
						componentsMissing: 
							(map availableComponents 'excludeNil theEntry 
								(if (eq (@ theEntry 'available) 0)
									(@ theEntry 'item)
									)
								)
						
						componentsLacking: 
							(map availableComponents 'excludeNil theEntry 
								(if (ls (@ theEntry 'available) (itmGetCount (@ theEntry 'item)))
									(itmSetCount (@ theEntry 'item) 
										(subtract (itmGetCount (@ theEntry 'item)) (@ theEntry 'available))
										) 
									)
								)

						noCargoSpace: (= maxCountSpace 0)
						}
					)
				))
			
			(setq tinkerCreateItem (lambda (theRecipe theCount)
				(if (@ theRecipe 'enhancement)
					(itmSetCount 
						(itmSetEnhanced 
							(itmCreate (@ theRecipe 'item) 1)
							{
								enhancement: (@ theRecipe 'enhancement)
								type: &vtTinkerEnhancement;
								}
							)
						(or (@ theRecipe 'itemCount) theCount)
						)
					(itmCreate (@ theRecipe 'item) (or (@ theRecipe 'itemCount) theCount))
					)
				))
				
			(setq tinkerFabricate (lambda (theRecipe theCost theCount options)
				(block (
					(compareFlags '(ignoreCharges ignoreData ignoreDisrupted))
					(reminderType (or (@ options 'reminderMission) &msTinkerReminder;))
					(itemToCreate (tinkerCreateItem theRecipe theCount))
					itemsConsumed
					)
				
				
					;	Consume items. NOTE: We expect our callers to have already checked
					;	to make sure there are enough items.

					(enum (@ theRecipe 'components) theEntry
						(block (
							(available 
								(rpgCalcComponentsAvailable gPlayerShip 
									(itmCreate (@ theEntry 'item) (* theCount (@ theEntry 'count)))
									)
								)
							)
							
							;	Consume items
							;
							;	NOTE: rpgCalcComponentsAvailable has done all the work to figure
							;	out exactly how many items to consume.

							(enum (@ available 'damagedItems) itemToConsume
								(block ()
									(objRemoveItem gPlayerShip itemToConsume)
									(setq itemsConsumed (append itemsConsumed (list itemToConsume)))
									)
								)

							(enum (@ available 'items) itemToConsume
								(block ()
									(objRemoveItem gPlayerShip itemToConsume)
									(setq itemsConsumed (append itemsConsumed (list itemToConsume)))
									)
								)
							)
						)
						
					;	Charge player
					
					(plyCharge gPlayer (multiply theCost theCount))
					
					;	Create the resulting item
					
					(itmSetKnown itemToCreate True)
					(objAddItem gPlayerShip itemToCreate)
					
					;	Loop over player missions and see if we've accomplished any of them
					
					(enum (msnFind gSource (cat "aS +unid:" reminderType ";")) theMission
						(if (itmIsEqual itemToCreate (tinkerCreateItem (msnGetData theMission 'recipe) 1))
							(msnSuccess theMission)
							)
						)
					
					;	Return result
					
					{	itemsCreated: itemToCreate
						itemsConsumed: itemsConsumed
						totalCost: (multiply theCost theCount)
						}
					)
				))
				
			(setq tinkerFindRecipe (lambda (recipeList itemType)
				(@ (filter recipeList theRecipe
						(eq (@ theRecipe 'item) itemType)
						)
					0
					)
				))
			)
	</Globals>
	
<!-- RESOURCES -->

	<Image UNID="&rsTinkerStations;"		bitmap="Resources\TinkerStations.jpg" bitmask="Resources\TinkerStationsMask.bmp" loadOnUse="true"/>

</TranscendenceModule>
