<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

<!-- REPLACE ARMOR SCREEN ======================================================

	This screen allows the player to replace armor from a station. It requires 
	the station to use the <ReplaceArmor> directive in its <Trade> section.

	gData uses the following fields:

	'armorSeg: The armor segment to replace on the player
	'checkMilitaryID: If True, we should check for a military ID before 
			installing Military armor. We also refuse to install Illegal armor.

-->

	<DockScreen UNID="&dsRPGReplaceArmor;"
			name=				"=(or (@ gData 'title) (objGetName gSource 'titleCapitalize))"
			type=				"itemPicker"
			inherit=		"&dsRPGUpgradeArmor;"
			nestedScreen=		"true"
			>

		<OnScreenInit>
			(scrSetData gScreen 'installOnly True)
		</OnScreenInit>

		<ListOptions
			dataFrom=	"player"
			list=		"aU"
			>
			(block (
				(shipObj (or (@ gData 'shipObj) gPlayerShip))
				(criteria (or (@ gData 'criteria) "aU"))
				(armorSeg (@ gData 'armorSeg))
				(armorToReplace (shpGetArmor shipObj armorSeg))
				)
				
				(scrSetListFilter gScreen (lambda (theItem)
					(and
						(itmMatches theItem criteria)
						(or
							(not armorToReplace)
							(not (itmIsEqual theItem armorToReplace 'ignoreInstalled))
							)
						)
					))
				)
		</ListOptions>

		<Panes>
		</Panes>

		<Language>
		</Language>
	</DockScreen>

<!-- UPGRADE ARMOR SCREEN ======================================================

	This screen allows the player to buy and replace and armor segment from the
	current station.

	gData uses the following fields:

	'armorSeg: The armor segment to replace on the player
	'checkMilitaryID: If True, we should check for a military ID before 
			installing Military armor. We also refuse to install Illegal armor.

	'sourceObj: If not Nil, use this as the object for inventory purposes.
-->

	<DockScreen UNID="&dsRPGUpgradeArmor;"
			name=				"=(or (@ gData 'title) (objGetName gSource 'titleCapitalize))"
			type=				"itemPicker"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			>

		<ListOptions
				dataFrom=	"=(or (@ gData 'sourceObj) 'source)"
				list=		"*"
				>
			(block (
				(shipObj (or (@ gData 'shipObj) gPlayerShip))
				)
				(scrSetListFilter gScreen (lambda (theItem)
					(and
						(itmMatches theItem "aU")
						(objGetSellPrice gSource theItem)
						(objGetArmorReplacePrice gSource theItem)
						(geq (itmGetLevel theItem) (itmGetLevel (shpGetArmor shipObj (@ gData 'armorSeg))))
						(!= (@ (objCanInstallItem shipObj theItem) 1) 'notCompatible)
						)
					))
				)
		</ListOptions>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(shipObj (or (@ gData 'shipObj) gPlayerShip))
						(armorSeg (@ gData 'armorSeg))
						(thisItem (scrGetItem gScreen))
						(oldItem (shpGetArmor shipObj armorSeg))
						(currencyUsed (objGetDefaultCurrency gSource))
						
						(result (if thisItem (objCanInstallItem shipObj thisItem armorSeg)))
						(resultCode (@ result 1))

						(installStatus (objGetItemProperty gSource thisItem 'installItemStatus))

						(installOnly (scrGetData gScreen 'installOnly))
						(totalCost (if installOnly
							(objGetArmorReplacePrice gSource thisItem)
							(+ (objGetSellPrice gSource thisItem) (objGetArmorReplacePrice gSource thisItem))
							))
						(cargoNeeded (- (itmGetMass oldItem) 
										(if installOnly (itmGetMass thisItem) 0)
										)
							)

						(desc Nil)
						(descID Nil)
						(canInstall Nil)
						(militaryCheck Nil)
						)

						;	Show the current armor
						
						(scrSetControlValue gScreen 'currentItem {
							source: shipObj
							item: oldItem
							})
						
						;	Tell the player whether we can install the selected item and how 
						;	much it will cost.

						(scrSetData gScreen 'cost totalCost)
						(switch
							(not thisItem)
								(setq descID 'descNoArmorHere)

							(= resultCode 'armorTooHeavy)
								(setq descID 'descArmorTooHeavy)

							(= resultCode 'cannotInstall)
								(setq desc (@ result 2))

							(and (itmHasAttribute thisItem "Military")
									(!= (setq militaryCheck (rpgCheckMilitaryIDPolicy gSource (@ gData 'checkMilitaryID))) True)
									)
								(setq descID 'descNeedMilitaryID)

							(and (itmHasAttribute thisItem "Illegal")
									(!= (rpgCheckMilitaryIDPolicy gSource (@ gData 'checkMilitaryID)) True)
									)
								(setq descID 'descArmorIllegal)

							(!= resultCode 'ok)
								(setq descID 'descCannotInstall)

							(not (@ installStatus 'canInstall))
								(setq desc (or
									(@ installStatus 'desc)
									(objTranslate gSource (@ installStatus 'descID) { item:thisItem itemName:(itmGetName thisItem 'article) targetObj:shipObj })
									(scrTranslate gScreen 'descNoTech { armorShort:(itmGetName thisItem 'short) })
									))

							(gr cargoNeeded (objGetCargoSpaceLeft shipObj))
								(setq descID 'descNotEnoughRoom)
							
							(gr totalCost (objGetBalance shipObj currencyUsed))
								(setq descID 'descCannotAfford)
								
							(= totalCost 0)
								(block Nil
									(setq descID 'descFreeInstall)
									(setq canInstall True)
									)
								
							;	Otherwise, we're OK to install
								
							(block Nil
								(setq descID 'descInstall)
								(setq canInstall True)
								)
							)

						;	If the new segment is of a lower level than the current
						;	segment, then warn the player
						(if canInstall
							(switch
								(gr (itmGetLevel oldItem) (itmGetLevel thisItem))
									(scrSetControlValueTranslate gScreen 'descWarning 'descWarningLevel {
										armorShort:(itmGetName oldItem 'short)
										})
								)
							)

						;	Set the description
						(if descID
							(scrSetDescTranslate gScreen descID {
								armor:thisItem
								armorPlural:(itmGetName thisItem 'plural)
								armorArticle:(itmGetName thisItem 'article)
								armorShort:(itmGetName thisItem 'short)
								cost:(fmtCurrency currencyUsed totalCost)
								militaryID:(@ militaryCheck 'idName)
								})
							(scrSetDesc gScreen desc)
							)
						
						;	Enable/disable actions
						(scrEnableAction gScreen 'actionBuyAndInstall canInstall)
						(scrEnableAction gScreen 'actionInstallArmor canInstall)

						(scrShowAction gScreen 'actionBuyAndInstall (not installOnly))
						(scrShowAction gScreen 'actionInstallArmor installOnly)
						)
				</OnPaneInit>

				<Controls>
					<ItemDisplay id="currentItem"/>
					<Text id="desc"/>
					<Text id="descWarning" style="warning"/>
				</Controls>
				
				<Actions>
					<Action id="actionBuyAndInstall" default="1">
						(block (
							(shipObj (or (@ gData 'shipObj) gPlayerShip))
							(thisItem (scrRemoveItem gScreen 1))
							)
							(rpgBuyItem gSource thisItem (scrGetData gScreen 'cost) (objGetDefaultCurrency gSource))
							(shpInstallArmor shipObj thisItem (@ gData 'armorSeg))
							(scrExitScreen gScreen)
							)
					</Action>

					<Action id="actionInstallArmor" default="1">
						(block (
							(shipObj (or (@ gData 'shipObj) gPlayerShip))
							(thisItem (scrRemoveItem gScreen 1))
							(currencyUsed (objGetDefaultCurrency gSource))
							(installCost (scrGetData gScreen 'cost))

							armorInCargo
							)
							;	If we're not installing on the player ship, then
							;	we remove any spare armor segments (and add them back
							;	later.

							(if (!= shipObj gPlayerShip)
								(block ()
									(setq armorInCargo (objGetItems shipObj "aU"))
									(enum armorInCargo theItem (objRemoveItem shipObj theItem))
									)
								)

							;	Install

							(objAddItem shipObj thisItem 1)
							(shpInstallArmor shipObj thisItem (@ gData 'armorSeg))
							(objCharge shipObj currencyUsed installCost)
							(objCredit gSource currencyUsed installCost)

							;	Move the uninstalled armor segment to the player

							(if (!= shipObj gPlayerShip)
								(block ()
									(enum (objGetItems shipObj "aU") theArmor
										(block Nil
											(objRemoveItem shipObj theArmor)
											(objAddItem gPlayerShip theArmor)
											)
										)
								
									(enum armorInCargo theItem (objAddItem shipObj theItem))
									)
								)

							;	Done

							(scrExitScreen gScreen)
							)
					</Action>

					<Action id="actionCancel" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>
	
		<Language>
			<Text id="actionBuyAndInstall">[B]uy and Install</Text>
			<Text id="actionInstallArmor">[I]nstall this Armor</Text>

			<Text id="descNoArmorHere">The station doesn't have any armor segments to install.</Text>
			<Text id="descArmorTooHeavy">%ArmorPlural% are too heavy for your ship's hull.</Text>
			<Text id="descNeedMilitaryID">You must have %militaryID% to install %armorShort%.</Text>
			<Text id="descArmorIllegal">We do not install illegal armor.</Text>
			<Text id="descCannotInstall">This armor segment cannot be installed.</Text>
			<Text id="descNoTech">We do not have the technology to install %armorShort%.</Text>
			<Text id="descNotEnoughRoom">

				There isn't enough room in your cargo hold to store your old 
				armor segment. Sell or jettison cargo to make room.

			</Text>
			<Text id="descCannotAfford">We can install %armorArticle% for %cost%. Unfortunately, you cannot afford the cost.</Text>
			<Text id="descFreeInstall">We can install %armorArticle% free of charge.</Text>
			<Text id="descInstall">We can install %armorArticle% for %cost%.</Text>

			<Text id="descWarningLevel">Note: Your currently installed %armorShort% is higher level.</Text>
		</Language>
	</DockScreen>
	
<!-- INSTALL DEVICE SCREEN =====================================================

	This screen asks the user to install a device from the ship's cargo hold.

	gData uses the following fields:

	checkMilitaryID:	If True we check to make sure the player has a military
						ID before selling them a military reactor.
						
	criteria:			If not Nil this is the set of devices that we should
						offer for installation. Otherwise, we default to "dUN"

	installPriceAdj:	The price to install the device. If Nil, we use the 
						item's default install price. If an integer, we treat it
						as a % price adjustment. If a function, we evaluate it
						to determine the price.

	noItemsText:		Text to show if itemList is empty
	
	replaceItem:		The installed device to replace (may be Nil).

-->

	<DockScreen UNID="&dsRPGInstallDevice;"
			name=				"=(or (@ gData 'title) (objGetName gSource 'titleCapitalize))"
			type=				"itemPicker"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			>

		<ListOptions
				dataFrom=	"player"
				list=		"*"
				>
			(block (
				(criteria (if (@ gData 'criteria) (@ gData 'criteria) "dUN"))
				)
				
				(scrSetListFilter gScreen (lambda (theItem)
					(and
						(itmMatches theItem criteria)
						(or
							(not (@ gData 'replaceItem))
							(not (itmIsEqual theItem (@ gData 'replaceItem) 'ignoreInstalled))
							)
						)
					))
				)
		</ListOptions>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(shipObj (or (@ gData 'shipObj) gPlayerShip))
						thisItem
						theResult
						)
						(setq theResult (rpgInstallDevicePrep {
							item: (scrGetItem gScreen)
							targetObj: shipObj

							checkMilitaryID: (@ gData 'checkMilitaryID)
							currencyUsed: (objGetDefaultCurrency gSource)
							installerObj: gSource
							installPriceAdj: (@ gData 'installPriceAdj)
							itemInCargo: True
							replaceItem: (@ gData 'replaceItem)
							}))

						(if (@ gData 'replaceItem)
							(scrSetControlValue gScreen 'currentItem {
								source: shipObj
								item: (@ gData 'replaceItem)
								})
							)
							
						(setq gCanInstall (@ theResult 'canInstall))
						(setq gCost (@ theResult 'price))

						; Set the description
						(scrSetDesc gScreen (@ theResult 'desc))
						(if (@ theResult 'descWarning)
							(scrSetControlValue gScreen 'descWarning (@ theResult 'descWarning))
							)

						; Disable actions
						(scrEnableAction gScreen 'actionInstall gCanInstall)
						)
				</OnPaneInit>

				<Controls>
					<ItemDisplay id="currentItem"/>
					<Text id="desc"/>
					<Text id="descWarning" style="warning"/>
				</Controls>

				<Actions>
					<Action id="actionInstall" default="1">
						(if gCanInstall
							(block (
								(shipObj (or (@ gData 'shipObj) gPlayerShip))
								(itemToInstall (itmSetCount (scrGetItem gScreen) 1))

								(recommendedSlot {
									deviceSlot: 
										(if (and (@ gData 'replaceItem)
												(itmGetInstallPos (@ gData 'replaceItem))
												)
											(itmGetInstallPos (@ gData 'replaceItem))
											-1
											)
									slotPosIndex: (@ gData 'slotPosIndex)
									})

								devicesInCargo
								)
								;	If we're not installing on the player ship, then we 
								;	need to move the item to the target object. NOTE: At this
								;	point we cannot fail, so we don't need to recover.

								(if (!= shipObj gPlayerShip)
									(block ()
										(setq devicesInCargo (objGetItems shipObj "dU"))
										(enum devicesInCargo theItem (objRemoveItem shipObj theItem))

										(objRemoveItem gPlayerShip itemToInstall)
										(objAddItem shipObj itemToInstall)
										)
									)

								;	Install
								
								(shpInstallDevice shipObj itemToInstall recommendedSlot)
								(objCharge shipObj (objGetDefaultCurrency gSource) gCost)
								(objCredit gSource (objGetDefaultCurrency gSource) gCost)
								(typSetData &svPlayer; 'tutorialInstalled True)
								
								;	If the original item is still installed, then uninstall it
							
								(if (and (@ gData 'replaceItem)
										(filter (objGetItems shipObj "dI") theItem
											(itmIsEqual theItem (@ gData 'replaceItem))
											)
										)
									(shpRemoveDevice shipObj (@ gData 'replaceItem))
									)

								;	If necessary, move old devices to the player ship

								(if (!= shipObj gPlayerShip)
									(block ()
										(enum (objGetItems shipObj "dU") theItem
											(block ()
												(objRemoveItem shipObj theItem)
												(objAddItem gPlayerShip theItem)
												)
											)

										(enum devicesInCargo theItem (objAddItem shipObj theItem))
										)
									)
								
								;	Done
								
								(scrExitScreen gScreen)
								)
							)
					</Action>

					<Action id="actionCancel" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>
	</DockScreen>

<!-- INSTALL DEVICE SCREEN =====================================================

	This screen asks the user to pick a device from a list of itemStructs and
	then installs the device (charging appropriately).

	gData uses the following fields:

	itemList:			This is a list of device itemStructs that we should 
						offer to install for the player.

	priceAdj:			A percent of standard price to charge. If Nil, we use
						the source's Trade directives. If an integer, we treat
						it as a % price adjustment (100 = 100% of price). If a
						function, we evaluate it to determine the price.

	installPriceAdj:	The price to install the device. If Nil, we use the 
						item's default install price. If an integer, we treat it
						as a % price adjustment. If a function, we evaluate it
						to determine the price.

	checkMilitaryID:	If True we check to make sure the player has a military
						ID before selling them a military reactor.

	noItemsText:		Text to show if itemList is empty

	noSuccessPane:		If True, we don't show a success pane.

-->

	<DockScreen UNID="&dsRPGInstallDeviceFromList;"
			name=			"=(or (@ gData 'title) (objGetName gSource 'titleCapitalize))"
			type=           "customItemPicker"
			inherit=		"&dsDockScreenBase;"
			nestedScreen=   "true"
			>

		<List>
			(@ gData 'itemList)
		</List>

		<Panes>
			<Default>
				<onPaneInit>
					(block (
						(shipObj (or (@ gData 'shipObj) gPlayerShip))
						(theItem (scrGetItem gScreen))
						(currencyUsed (objGetDefaultCurrency gSource))
						currentItem
						result
						)
						(if theItem
							(block (
								(itemCategory (itmGetProperty theItem 'category))
								result
								)
								(setq result (rpgInstallDevicePrep {
									item: theItem
									targetObj: shipObj

									totalPrice: 
										(if (@ gData 'priceAdj)
											(add
												(rpgAdjustPrice gSource theItem (@ gData 'priceAdj) currencyUsed 'noInventoryCheck)
												(rpgAdjustInstallPrice gSource theItem (@ gData 'installPriceAdj) currencyUsed)
												)
											)
									buyAndInstall: (not (@ gData 'priceAdj))
									installPriceAdj: (@ gData 'installPriceAdj)
									currencyUsed: currencyUsed
									maxTechLevel: 25	;	This accepts all items in list, even if station cannot install them
									checkMilitaryID: (@ gData 'checkMilitaryID)
									}))

								(scrSetData gScreen 'result result)
								(scrSetData gScreen 'theItem theItem)

								;	Show the current device
						
								(switch
									(@ result 'itemToReplace)
										(scrSetControlValue gScreen 'currentItem {
											source: shipObj
											item: (@ result 'itemToReplace)
											})

									(and (= itemCategory 'launcher)
											(setq currentItem (@ (objGetItems shipObj "lI") 0))
											)
										(scrSetControlValue gScreen 'currentItem {
											source: shipObj
											item: currentItem
											})

									(and (= itemCategory 'shields)
											(setq currentItem (@ (objGetItems shipObj "sI") 0))
											)
										(scrSetControlValue gScreen 'currentItem {
											source: shipObj
											item: currentItem
											})

									(scrSetControlValue gScreen 'currentItem Nil)
									)

								;	Enable/disable action

								(scrSetDesc gScreen (@ result 'desc))
								(scrEnableAction gScreen 'actionInstall (@ result 'canInstall))
								(if (gr (@ result 'price) 0)
									(scrSetActionLabel gScreen 'actionInstall (scrTranslate gScreen 'actionBuyAndInstall))
									)
								)

							; No items in list
							(block Nil
								(scrSetDesc gScreen
									(if (@ gData 'noItemsText)
										(@ gData 'noItemsText)
										"You cannot install any items."
										)
									)
								(scrEnableAction gScreen 'actionInstall Nil)
								)
							)
						)
				</onPaneInit>

				<Controls>
					<ItemDisplay id="currentItem"/>
					<Text id="desc"/>
				</Controls>

				<Actions>
					<Action id="actionInstall" default="1">
						(block (
							(shipObj (or (@ gData 'shipObj) gPlayerShip))
							(theItem (scrGetData gScreen 'theItem))
							(result (scrGetData gScreen 'result))
							(cost (@ result 'price))
							)
							(rpgBuyItem gSource theItem cost (objGetDefaultCurrency gSource))
							(shpInstallDevice shipObj theItem)
							(typSetData &svPlayer; 'tutorialInstalled True)

							(scrSetReturnData gScreen 'installed True)

							(if (@ gData 'noSuccessPane)
								(scrExitScreen gScreen)
								(scrShowPane gScreen "InstallSuccess")
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						(block ()
							(scrSetReturnData gScreen 'installed Nil)
							(scrExitScreen gScreen)
							)
					</Action>
				</Actions>
			</Default>

			<InstallSuccess
					noListNavigation="true"
					>
				<OnPaneInit>
					(block (
						(theItem (scrGetData gScreen 'theItem))
						)
						(scrSetDesc gScreen
							(cat (itmGetName theItem 0x01) " installed successfully.")
							)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Continue" default="1" cancel="1" key="C">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</InstallSuccess>
		</Panes>

		<Language>
			<Text id="actionBuyAndInstall">[B]uy and Install</Text>
		</Language>
	</DockScreen>

<!-- UPGRADE DEVICE SCREEN =====================================================

	This screen allows the player to buy and install a device.

	gData uses the following fields:

	'criteria: The device criteria to offer (default to "dUN")
	'checkMilitaryID: If True, we should check for a military ID before 
			installing Military armor. We also refuse to install Illegal armor.
	'replaceItem: The installed device to replace (may be Nil).
	'sourceObj: If not Nil, use this as the object for inventory purposes.

-->

	<DockScreen UNID="&dsRPGUpgradeDevice;"
			name=				"=(or (@ gData 'title) (objGetName gSource 'titleCapitalize))"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			>
		<Properties>
			<Variant id="rpg.checkMilitaryID">(or (objGetProperty gSource 'rpg.checkMilitaryID) (@ gData 'checkMilitaryID))</Variant>
			<Variant id="rpg.criteria">(or (@ gData 'criteria) "dUN")</Variant>
			<Variant id="rpg.replaceItem">(@ gData 'replaceItem)</Variant>
			<Variant id="rpg.showActualItem">(objGetProperty gSource 'rpg.showActualItem)</Variant>
			<Variant id="rpg.sourceObj">(@ gData 'sourceObj)</Variant>
		</Properties>

		<Display type="itemPicker"
				dataFrom=	"=(or (scrGetProperty gScreen 'rpg.sourceObj) 'source)"
				list=		"*"
				>
			<OnDisplayInit>
				(block (
					(shipObj (or (@ gData 'shipObj) gPlayerShip))
					(criteria (scrGetProperty gScreen 'rpg.criteria))
					(replaceItem (scrGetProperty gScreen 'rpg.replaceItem))
					(minLevel (or (itmGetLevel replaceItem) 1))
					)
				
					(scrSetListFilter gScreen (lambda (theItem)
						(and
							(itmMatches theItem criteria)
							(objGetSellPrice gSource theItem)
							(objGetItemProperty gSource theItem 'installDevicePrice)
							(or
								(not replaceItem)
								(not (itmIsEqual theItem replaceItem 'ignoreInstalled))
								)
							(or
								(geq (itmGetLevel theItem) minLevel)
								(= (itmGetProperty theItem 'category) 'cargoHold)
								)
							(!= (@ (objCanInstallItem shipObj theItem) 1) 'notCompatible)
							)
						))

					;	We set the underlying engine property based on inputs.

					(scrSetProperty gScreen 'showActualItem (scrGetProperty gScreen 'rpg.showActualItem))
					)
			</OnDisplayInit>
		</Display>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(shipObj (or (@ gData 'shipObj) gPlayerShip))
						(replaceItem (scrGetProperty gScreen 'rpg.replaceItem))
						thisItem theResult
						)
						(setq theResult (rpgInstallDevicePrep {
							item: (scrGetItem gScreen)
							targetObj: shipObj

							upgrade: True
							checkMilitaryID: (scrGetProperty gScreen 'rpg.checkMilitaryID)
							checkTotalPower: True
							currencyUsed: (objGetDefaultCurrency gSource)
							installerObj: gSource
							replaceItem: replaceItem
							showActualItem: (scrGetProperty gScreen 'rpg.showActualItem)
							}))

						(if replaceItem
							(scrSetControlValue gScreen 'currentItem {
								source: shipObj
								item: replaceItem
								})
							)

						(scrSetData gScreen 'result theResult)
						(scrSetData gScreen 'cost (@ theResult 'price))
						
						; Set the description
						(scrSetDesc gScreen (@ theResult 'desc))
						(if (@ theResult 'descWarning)
							(scrSetControlValue gScreen 'descWarning (@ theResult 'descWarning))
							)

						; Disable actions
						(scrEnableAction gScreen 'actionBuyAndInstall (@ theResult 'canInstall))
						)
				</OnPaneInit>

				<Controls>
					<ItemDisplay id="currentItem"/>
					<Text id="desc"/>
					<Text id="descWarning" style="warning"/>
				</Controls>
				
				<Actions>
					<Action id="actionBuyAndInstall" default="1">
						(block (
							(shipObj (or (@ gData 'shipObj) gPlayerShip))
							(theItem (itmSetCount (scrGetItem gScreen) 1))
							(recommendedSlot {
								deviceSlot: 
									(if (and (@ gData 'replaceItem)
											(itmGetInstallPos (@ gData 'replaceItem))
											)
										(itmGetInstallPos (@ gData 'replaceItem))
										-1
										)
								slotPosIndex: (@ gData 'slotPosIndex)
								})
							(sourceObj (if (@ gData 'sourceObj) (@ gData 'sourceObj) gSource))
							)
							
							(rpgBuyItem gSource theItem (scrGetData gScreen 'cost) (objGetDefaultCurrency gSource))
							(shpInstallDevice shipObj theItem recommendedSlot)
							(typSetData &svPlayer; 'tutorialInstalled True)
							(objRemoveItem sourceObj theItem)
							
							;	If the original item is still installed, then uninstall it
							
							(if (and (@ gData 'replaceItem)
									(filter (objGetItems shipObj "dI") theItem
										(itmIsEqual theItem (@ gData 'replaceItem))
										)
									)
								(shpRemoveDevice shipObj (@ gData 'replaceItem))
								)
								
							;	Done
							
							(scrExitScreen gScreen)
							)
					</Action>

					<Action id="actionCancel" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>
	
		<Language>
			<Text id="actionBuyAndInstall">[B]uy and Install</Text>
		</Language>
	</DockScreen>

<!-- REPAIR ITEM SCREEN ========================================================

	This screen allows the player to repair an item.

	gData uses the following fields:

	criteria:			This is the criteria for items that we can repair.

	priceAdj:			Cost to repair the item as a percent of the standard
						repair price. The standard repair price is equal to the
						difference between the full price and the price of a
						damaged item.

-->
	<DockScreen UNID="&dsRPGRepairItem;"
			name=				"=(or (@ gData 'title) (objGetName gSource 'titleCapitalize))"
			type=				"itemPicker"
			nestedScreen=		"true"
			inherit=			"&dsDockScreenBase;"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"*"
			>
			(scrSetListFilter gScreen (@ gData 'criteria))
		</ListOptions>

		<Panes>
			<Default descID="descNoItems">
				<OnPaneInit>
					(block (
						(shipObj (or (@ gData 'shipObj) gPlayerShip))
						thisItem currencyUsed
						)
						(setq thisItem (scrGetItem gScreen))
						(setq currencyUsed (objGetDefaultCurrency gSource))
						(setq gResult Nil)

						(if thisItem
							(block (desc stdRepairCost)
								; Compute the standard repair cost
								(setq stdRepairCost (subtract (itmGetPrice (itmSetProperty thisItem 'damaged Nil) currencyUsed) (itmGetPrice thisItem currencyUsed)))

								; Compute the cost to repair the item
								(setq gCost (divide (multiply stdRepairCost (@ gData 'priceAdj)) 100))

								(switch
									(gr gCost (objGetBalance shipObj currencyUsed))
										(setq desc (cat "It will cost " (fmtCurrency currencyUsed gCost) " to repair " (itmGetName thisItem 0x04) ". Unfortunately, you cannot afford the cost."))

									(block Nil
										(setq desc (cat "We can repair " (itmGetName thisItem 0x04) " for " (fmtCurrency currencyUsed gCost) "."))
										(setq gResult True)
										)
									)

								(scrSetDesc gScreen desc)
								)
							)

						(scrEnableAction gScreen 'actionRepairItem gResult)
						)
				</OnPaneInit>

				<Actions>
					<Action id="actionRepairItem" default="1">
						(block (
							(shipObj (or (@ gData 'shipObj) gPlayerShip))
							)
							(setq gItem (scrGetItem gScreen))
							
							(shpEnhanceItem shipObj gItem)
							(objCharge shipObj (objGetDefaultCurrency gSource) gCost)
							(objCredit gSource (objGetDefaultCurrency gSource) gCost)

							(scrShowPane gScreen "Success")
							)
					</Action>

					<Action id="actionCancel" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>

			</Default>

			<Success
					noListNavigation="true"
					>
				<OnPaneInit>
					(scrSetDesc gScreen (cat "Your " (itmGetName gItem 0) " has been repaired successfully."))
				</OnPaneInit>

				<Actions>
					<Action id="actionContinue" default="1" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Success>
		</Panes>

		<Language>
			<Text id="descNoItems">
				You do not have any items that we can repair.
			</Text>
		</Language>
	</DockScreen>

</TranscendenceModule>
