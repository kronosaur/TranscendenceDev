<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

<!-- Squadron Management UI -->

	<DockScreen unid="&dsRPGSquadron;"
			inherit=		"&dsDockScreenBase;"
			nestedScreen=	"true"
			>
		<Display type="iconList">
			<OnDisplayInit>
				(map (obj@ gPlayerShip 'squadron) theEntry
					(block (
						(shipObj (@ theEntry 'obj))
						)
						(switch
							;	This is a stored auton

							(@ theEntry 'item)
								{
									title: (@ theEntry 'name)
									icon: (itmGetImageDesc (@ theEntry 'item))

									status: (@ theEntry 'status)
									item: (@ theEntry 'item)
									}

							;	This is an active ship in the system

							(block (
								(integrity (- 100 (objGetVisibleDamage shipObj)))
								)
								{
									title: (@ theEntry 'name)
									icon: (objGetImageDesc shipObj)
									statusBar: integrity
									statusBarColor: (obj@ shipObj 'hudColor)

									status: (@ theEntry 'status)
									obj: shipObj
									objID: (@ theEntry 'objID)
									type: (@ theEntry 'type)
									}
								)
							)
						)
					)
			</OnDisplayInit>
		</Display>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(squadronList (scrGetList gScreen))
						(entry (scrGetListEntry gScreen))

						(deployedCount (map squadronList 'reduceSum theEntry
							(if (= (@ theEntry 'status) 'deployed) 1)
							))

						(selection
							(switch
								(= (typeof entry) 'struct)
									(list entry)

								entry
								)
							)
						(selectionDeployed (filter selection theEntry
							(= (@ theEntry 'status) 'deployed)
							))

						(deployedObjs
							(switch
								(= (count selection) (count selectionDeployed))
									(map selection theEntry
										(@ theEntry 'obj)
										)
								)
							)

						(selectionStored (filter selection theEntry
							(= (@ theEntry 'status) 'stored)
							))

						(storedItems
							(switch
								(= (count selection) (count selectionStored))
									(map selection theEntry
										(@ theEntry 'item)
										)
								)
							)

						(actionPos -1)
						(nextActionPos (lambda () (setq actionPos (+ actionPos 1))))
						)
						(switch

							;	If nothing is selected, then we show commands that
							;	apply to the whole squadron.

							(not entry)
								(block (
									(squadronComms (obj@ gPlayerShip 'squadronCommsStatus))

									(addAction (lambda (msgID)
										(scrAddAction gScreen msgID (nextActionPos) Nil
											(lambda ()
												(block ()
													(objSquadronComms gPlayerShip 'squadron msgID)
													(scrExitScreen gScreen 'forceUndock)
													)
												)
											)
										))
									)
									;	Add squadon orders

									(if (find squadronComms 'msgAttackTarget)
										(addAction 'msgAttackTarget)
										)

									(if (find squadronComms 'msgBreakAndAttack)
										(addAction 'msgBreakAndAttack)
										)

									(if (find squadronComms 'msgAttackInFormation)
										(addAction 'msgAttackInFormation)
										)

									(if (find squadronComms 'msgFormUp)
										(addAction 'msgFormUp)
										)

									(if (find squadronComms 'msgSetFormation)
										(block ()
											(addAction 'msgFormationAlpha)
											(addAction 'msgFormationBeta)
											(addAction 'msgFormationGamma)
											)
										)

									(if (find squadronComms 'msgWait)
										(addAction 'msgWait)
										)

									;	Set the descriptor

									(switch
										(gr deployedCount 0)
											(scrSetDescTranslate gScreen 'descSquadronDeployed {
												shipCount: (fmtNoun (scrTranslate gScreen 'nounShip) deployedCount 'countAlways)
												})

										(scrSetDescTranslate gScreen 'descNoSquadron)
										)
									)

							;	If we have only deployed objects selected, then we show
							;	commands that apply to the selection.

							deployedObjs
								(block (
									(squadronComms (objSquadronCommsMessages gPlayerShip deployedObjs))
									(skipList '(msgFormationAlpha msgFormationBeta msgFormationGamma msgStatus))

									;	Generate a list of messages

									(squadronActions
										(sort
											(map squadronComms 'excludeNil msgID
												(if (not (find skipList msgID))
													{
														msgID: msgID
														label: (objTranslate (@ deployedObjs 0) (cat "action." msgID))
														}
													)
												)
											'label
											)
										)

									objName objNameGeneric
									)

									;	If we only have a single object, then add an action to view
									;	configuration.

									(if (= (count deployedObjs) 1)
										(scrAddAction gScreen 'actionShowConfiguration (nextActionPos) Nil
											(lambda ()
												(scrShowScreen gScreen (obj@ (@ deployedObjs 0) 'shipConfigScreen) {
													shipObj: (@ deployedObjs 0)
													shipConfig: True
													dockServicesDesc: (scrTranslate gScreen 'descConfiguration {
														shipClass: (objGetName (@ deployedObjs 0) 'generic)
														})
													})
												)
											)
										)

									;	Add commands

									(enum squadronActions theEntry
										(block (
											(msgID (@ theEntry 'msgID))
											(label (@ theEntry 'label))
											)
											(scrAddAction gScreen msgID (nextActionPos) label
												(lambda ()
													(block ()
														(objSquadronComms gPlayerShip deployedObjs msgID)
														(scrExitScreen gScreen 'forceUndock)
														)
													)
												)
											)
										)

									;	Set the description

									(switch
										(gr (count deployedObjs) 1)
											(scrSetDescTranslate gScreen 'descShipsSelected {
												shipCount: (fmtNoun (scrTranslate gScreen 'nounShip) (count deployedObjs) 'countAlways)
												})

										(!= (setq objName (objGetName (@ deployedObjs 0)))
												(setq objNameGeneric (objGetName (@ deployedObjs 0) 'generic))
												)
											(scrSetDescTranslate gScreen 'descCharacterSelected {
												name: objName
												shipClass: (objGetName (@ deployedObjs 0) '(article generic))
												})

										(scrSetDescTranslate gScreen 'descShipSelected {
											shipClass: objNameGeneric
											})
										)
									)

							storedItems
								(block (
									(canDeploy (map storedItems 'excludeNil theItem
										(obj@ gPlayerShip theItem 'canBeUsed)
										))
									)

									;	Add action to deploy

									(scrAddAction gScreen 'actionDeploy (nextActionPos) Nil
										(lambda ()
											(enum storedItems theItem
												(switch
													(not (obj@ gPlayerShip theItem 'canBeUsed))
														Nil

													(obj@ gPlayerShip theItem 'hasUseScreen)
														Nil

													(block ()
														(plyUseItem gPlayer theItem)
														(scrExitScreen gScreen 'forceUndock)
														)
													)
												)
											)
										)

									;	Action is disabled if none of the items can be used.

									(scrEnableAction gScreen 'actionDeploy canDeploy)

									;	If there is a single item selected, show configuration

									(if (and (= (count storedItems) 1)
											(itmHasAttribute (@ storedItems 0) 'auton)
											)
										(scrAddAction gScreen 'actionShowConfiguration (nextActionPos) Nil
											(lambda ()
												(block (
													(autonObj (rpgCreateSuspendedAuton gPlayerShip (@ storedItems 0)))
													)
													(scrShowScreen gScreen (obj@ autonObj 'shipConfigScreen) {
														shipObj: autonObj
														shipConfig: True
														dockServicesDesc: (scrTranslate gScreen 'descConfiguration {
															shipClass: (objGetName autonObj 'generic)
															})

														onExit: (lambda ()
															(block ()
																(dbgOutput "Auton returned")
																(rpgCleanUpSuspendedAuton gPlayerShip)
																)
															)
														})
													)
												)
											)
										)

									;	Set the description

									(switch
										(gr (count storedItems) 1)
											(scrSetDescTranslate gScreen 'descItemsSelected {
												itemCount: (fmtNoun (scrTranslate gScreen 'nounAuton) (count storedItems) 'countAlways)
												})

										(scrSetDescTranslate gScreen 'descItemSelected {
											itemName: (itmGetName (@ storedItems 0) 0)
											})
										)
									)

							(scrSetDesc gScreen "LATER: " entry)
							)
						)
				</OnPaneInit>
				<Actions>

					<Action id="actionDone" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>

		<Language>
			<Text id="actionDeploy">[D]eploy</Text>
			<Text id="actionShowConfiguration">[C]onfiguration</Text>

			<Text id="msgAttackInFormation">Attack [i]n Formation</Text>
			<Text id="msgAttackTarget">[A]ttack Target</Text>
			<Text id="msgBreakAndAttack">[B]reak &amp; Attack</Text>
			<Text id="msgFormUp">[F]orm Up</Text>
			<Text id="msgFormationAlpha">Formation [1] Alpha</Text>
			<Text id="msgFormationBeta">Formation [2] Beta</Text>
			<Text id="msgFormationGamma">Formation [3] Gamma</Text>
			<Text id="msgWait">[W]ait</Text>

			<Text id="descSquadronDeployed">
			
				You have %shipCount% deployed in the system.
				
			</Text>
			<Text id="descNoSquadron">
			
				None of your ships are deployed in this system.
				
			</Text>
			<Text id="descShipsSelected">

				You've selected %shipCount% in your squadron.
			
			</Text>
			<Text id="descShipSelected">

				The %ShipClass% is deployed.

			</Text>
			<Text id="descCharacterSelected">

				%Name% is flying %shipClass%.
			
			</Text>
			<Text id="descItemsSelected">

				You've selected %itemCount% in your cargo hold.
			
			</Text>
			<Text id="descItemSelected">

				The %itemName% is in your cargo hold.
			
			</Text>
			<Text id="descConfiguration">

				%ShipClass%.
			
			</Text>

			<Text id="nounAuton">auton(s)</Text>
			<Text id="nounShip">ship(s)</Text>
		</Language>
	</DockScreen>

</TranscendenceModule>
