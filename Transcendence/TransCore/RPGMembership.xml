<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

<!-- MEMBERSHIP

	This module defines some helpers for implementing membership in an organization
	with experience points and ranks.

	REQUIREMENTS

	The membership type (usually the sovereign) must have the following elements:

	rankTable (Definition): We expect this to be a struct (or list) of ranks, indexed
		by rank, and containing an xpNeeded field.

	rpg.descPromotion: This series of language elements should define the
		text shown to the player when they are promoted to a given rank (starting
		at 2). The rank is passed in gData in the rank field.

	DATA

	rpg.rank: We store the player's current rank.

	rpg.xp: This is the player's current XP.

	EVENTS

	CheckPromotion: If present this even can provide custom promotion criteria to
		be used instead of XP.

	OnPromotion: This event will be called from the promotion screen. Allowing additional
		rewards (e.g. military ID) to be given to the player.

-->

<!-- DOCK SCREENS -->

	<DockScreen unid="&dsRPGPromotion;"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			>
		<Display type="detailsPane">
			<OnDisplayInit>
				(or (@ gData 'rankDetails) (objTranslate gSource 'rpg.statusDetails))
			</OnDisplayInit>
		</Display>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(membership (@ gData 'membership))
						(newRank (rpgIsPromoted membership))
						)

						(typSet@ membership 'rpg.rank newRank)
						(scrSetDesc gScreen (typTranslate membership "rpg.descPromotion" {
							sourceObj: gSource
							membership: membership
							rank: newRank
							}))
						)
				</OnPaneInit>

				<Actions>
					<Action id="actionContinue">
						(block Nil
							(typFireEvent (@ gData 'membership) 'OnPromotion)
							(scrExitScreen gScreen)
							)
					</Action>
				</Actions>
			</Default>
		</Panes>
	</DockScreen>

<!-- GLOBALS -->

	<Globals>
	(block ()
		(setq rpgIsPromoted (lambda (membership)
			;	Check if the player should be promoted, returning their new rank (or Nil)
			(block (
				(rank (or (typ@ membership 'rpg.rank) 0))
				(xp (or (typ@ membership 'rpg.xp) 0))
				(rankTable (typ@ membership 'rankTable))
				(nextRank (or (@ (@ rankTable rank) 'nextRank) (+ rank 1)))
				(nextRankDesc (@ rankTable nextRank))
				)

				(switch
					;	Use the custom event if it exists

					(typHasEvent membership 'CheckPromotion)
						(typFireEvent membership 'CheckPromotion)

					;	If we previously had no rank (Nil) then promote to rank zero

					(not (typ@ membership 'rpg.rank))
						rank

					;	If no rank table of if we're already at the highest
					;	rank, then no promotion.

					(not nextRankDesc)
						Nil

					;	If we don't have enough XP, then no promotion.

					(ls xp (@ nextRankDesc 'xpNeeded))
						Nil

					;	Promotion to the next rank.

					(+ rank 1)
					)
				)
			))

		(setq rpgMissionRewardXP (lambda (membership xpReward missionObj)
			(block Nil

				;	Increment XP

				(typInc@ membership 'rpg.xp xpReward)

				;	If we're debriefing a mission, and we've been promoted,
				;	then set the appropriate promotion screen.

				(if (and missionObj 
						(rpgIsPromoted membership)
						)

					;	dsRPGMission checks for a well-known data member in the mission
					;	object to see if it should navigate to an additional screen.

					(block Nil
						(msnSetData missionObj 'rewardNextScreen &dsRPGPromotion;)
						(msnSetData missionObj 'rewardNextScreenData {
							membership: membership
							missionObj: missionObj
							})
						)
					)
				)
			))
		)
	</Globals>

</TranscendenceModule>