<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

<!-- AMMO BOXES -->

	<!-- Ammo Box, Akan 30 -->

	<ItemType UNID="&itAmmoBoxAkan30;"
			name=				"Akan 30 ammunition box(es)"
			level=				"4"
			value=				"1000"
			mass=				"2500"
			frequency=			"uncommon"
			unknownType=		"&vtUnknownAmmoBox;"
			attributes=			"ammoBox, commonwealth, consumable"

			description=		"This box contains Akan 30 cannon shell cartridges."
			>

		<Image imageID="&rsItems1;" imageX="0" imageY="384" imageWidth="96" imageHeight="96"/>

		<Invoke>
			(intAmmoBoxOpen (itmCreate &itAkan30CannonShell; 125))
		</Invoke>

	</ItemType>

	<!-- Ammo Box, White Strelka -->

	<ItemType UNID="&itAmmoBoxStrelka1;"
			name=				"White Strelka ammunition box(es)"
			level=				"5"
			value=				"2000"
			mass=				"2500"
			frequency=			"common"
			unknownType=		"&vtUnknownAmmoBox;"
			attributes=			"ammoBox, commonwealth, consumable"

			description=		"This box contains White Strelka missiles, compatible with the Makayev launcher."
			>

		<Image imageID="&rsItems1;" imageX="0" imageY="384" imageWidth="96" imageHeight="96"/>

		<Invoke>
			(intAmmoBoxOpen (itmCreate &itStrelkaWhite; 100))
		</Invoke>

	</ItemType>

	<!-- Ammo Box, Cluser MAG -->

	<ItemType UNID="&itAmmoBoxMAG;"
			name=				"ZG24 cluster MAG ammunition box(es)"
			level=				"6"
			value=				"1250"
			mass=				"2500"
			frequency=			"common"
			numberAppearing=	"1d4"
			unknownType=		"&vtUnknownAmmoBox;"
			attributes=			"ammoBox, commonwealth, consumable"

			description=		"This box contains ZG24 cluster MAGs."
			>

		<Image imageID="&rsItems1;" imageX="0" imageY="384" imageWidth="96" imageHeight="96"/>

		<Invoke>
			(intAmmoBoxOpen (itmCreate &itZG24ClusterMAG; 25))
		</Invoke>

	</ItemType>

	<!-- Ammo Box, Thermo Cannon -->

	<ItemType UNID="&itAmmoBoxThermo;"
			name=				"thermo cannon ammunition box(es)"
			level=				"7"
			value=				"1250"
			mass=				"2500"
			frequency=			"uncommon"
			numberAppearing=	"1d6"
			unknownType=		"&vtUnknownAmmoBox;"
			attributes=			"ammoBox, commonwealth, consumable, military"

			description=		"This box contains thermo cannon shell cartridges."
			>

		<Image imageID="&rsItems1;" imageX="0" imageY="384" imageWidth="96" imageHeight="96"/>

		<Invoke>
			(intAmmoBoxOpen (itmCreate &itThermoCannonShell; 25))
		</Invoke>

	</ItemType>

	<!-- Ammo Box, Red Strelka -->

	<ItemType UNID="&itAmmoBoxStrelka2;"
			name=				"Red Strelka ammunition box(es)"
			level=				"8"
			value=				"4000"
			mass=				"2500"
			frequency=			"uncommon"
			unknownType=		"&vtUnknownAmmoBox;"
			attributes=			"ammoBox, commonwealth, consumable, military"

			description=		"This box contains Red Strelka missiles, compatible with the Makayev launcher."
			>

		<Image imageID="&rsItems1;" imageX="0" imageY="384" imageWidth="96" imageHeight="96"/>

		<Invoke>
			(intAmmoBoxOpen (itmCreate &itStrelkaRed; 80))
		</Invoke>

	</ItemType>

	<!-- Ammo Box, Contraband -->

	<ItemType UNID="&itAmmoBoxContraband;"
			name=				"contraband box(es)"
			level=				"6"
			value=				"3000"
			mass=				"2500"
			frequency=			"uncommon"
			unknownType=		"&vtUnknownAmmoBox;"
			attributes=			"ammoBox, commonwealth, consumable, contrabandBox, illegal"

			description=		"This sealed container, made out of an old ammunition box, contains illegal items."
			>

		<Image imageID="&rsItems1;" imageX="0" imageY="384" imageWidth="96" imageHeight="96"/>

		<Invoke>
			(block (cost count illegalItems)
				(setq illegalItems (itmCreateRandom "* +Illegal; -ContrabandBox; -SmugglersHold; -ID;" "ruccc ccur-"))

				(setq cost (itmGetPrice illegalItems 'credit))
				(setq cost (if (eq cost 0) 100 cost))
				(setq count (divide (random 2000 4000) cost))
				(setq count (if (ls count 1) 1 count))
				(setq illegalItems (itmCreate (itmGetType illegalItems) count))

				(intAmmoBoxOpen illegalItems)
				)
		</Invoke>

	</ItemType>

	<!-- Ammo Box, Contaminated -->

	<ItemType UNID="&itAmmoBoxRadioactive;"
			name=				"contaminated ammunition box(es)"
			level=				"5"
			value=				"0"
			mass=				"2500"
			frequency=			"uncommon"
			unknownType=		"&vtUnknownAmmoBox;"
			attributes=			"ammoBox, commonwealth, consumable, cannotOrder, defective, notForSale"

			description=		"This ammunition box contains leaky radioactive ordnance."
			>

		<Image imageID="&rsItems1;" imageX="0" imageY="384" imageWidth="96" imageHeight="96"/>

		<Invoke>
			(block Nil
				(switch
					(shpIsRadioactive gSource)
						(objSendMessage gSource Nil (typTranslate gType 'msgMore))

					(shpIsRadiationImmune gSource)
						(objSendMessage gSource Nil (typTranslate gType 'msgImmune))

					(block Nil
						(shpMakeRadioactive gSource)
						(objSendMessage gSource Nil (typTranslate gType 'msgResult))
						)
					)

				; Identify the box
				(itmSetKnown gItem)

				; Remove box
				(objRemoveItem gSource gItem 1)
				)
		</Invoke>

		<Language>
			<Text id="msgMore">The box contained more radioactive waste</Text>
			<Text id="msgImmune">The box contained leaky radioactive ordnance; your ship is unaffected</Text>
			<Text id="msgResult">The box contained leaky radioactive ordnance</Text>
		</Language>
	</ItemType>

	<!-- Ammo Box, Booby-Trapped -->

	<ItemType UNID="&itAmmoBoxParalysis;"
			name=				"booby-trapped ammunition box(es)"
			level=				"7"
			value=				"0"
			mass=				"2500"
			frequency=			"uncommon"
			unknownType=		"&vtUnknownAmmoBox;"
			attributes=			"ammoBox, commonwealth, consumable, cannotOrder, defective"

			description=		"This ammunition box has been rigged to disable the ship when it is opened."
			>

		<Image imageID="&rsItems1;" imageX="0" imageY="384" imageWidth="96" imageHeight="96"/>

		<Invoke>
			(block Nil
				(objMakeParalyzed gSource (random 450 900))
				(objSendMessage gSource Nil (typTranslate gType 'msgResult))

				; Identify the box
				(itmSetKnown gItem)

				; Remove box
				(objRemoveItem gSource gItem 1)
				)
		</Invoke>

		<Language>
			<Text id="msgResult">The box explodes; ship disabled by EMP!</Text>
		</Language>
	</ItemType>

	<!-- Ammo Box, Unknown -->

	<ItemType UNID="&vtUnknownAmmoBox;"
			name=				"ammunition box(es)"
			virtual=			"true"
			level=				"5"
			value=				"800"
			attributes=			"unknown"

			description=		"These heavy metal boxes are used to hold ammunition of some type. Unfortunately, you cannot decode the markings that list their actual contents."
			>

		<Names>ammunition box(es) labeled "AAAA"; ammunition box(es) labeled with bar codes;
			ammunition box(es) labeled "C17"; ammunition box(es) labeled "Demolition";
			ammunition box(es) labeled "EX1803193"; ammunition box(es) labeled "FAILED";
			ammunition box(es) labeled "GOOD"; ammunition box(es) labeled "Hexagene";
			ammunition box(es) labeled "INFLAMMABLE"; ammunition box(es) labeled "Joker71930";
			ammunition box(es) labeled "Kill, Kill, Kill"; ammunition box(es) labeled "locked";
			ammunition box(es) labeled "munitions010"; ammunition box(es) labeled "NAMI";
			ammunition box(es) labeled "Open Carefully!"; ammunition box(es) labeled "P51 ammo";
			ammunition box(es) labeled "Q5-L1-Z8"; ammunition box(es) labeled "Rasiermesser";
			ammunition box(es) labeled "SAFE"; ammunition box(es) labeled "temperature sensitive";
			ammunition box(es) labeled "UNSAFE"; ammunition box(es) labeled "victory1201";
			ammunition box(es) labeled "WARNING!"; ammunition box(es) labeled "Xplosives! Caution!";
			ammunition box(es) labeled "yellow dust"; ammunition box(es) labeled "ZG24"
		</Names>

	</ItemType>
	
<!-- Miscellaneous ROMS -->

	<!-- Cash Card, Blue -->

	<ItemType UNID="&itCashCardBlue;"
			name=				"blue cash card"
			attributes=			"cashCard, consumable, cannotOrder, humanTech"
			inherit=			"&baCashCard;"

			level=				"2"
			frequency=			"rare"

			value=				"100"
			mass=				"1"
			unknownType=		"&itUnknownROM;, &itUnknownROMB;, &itUnknownROMC;"

			description=		"This ROM stores digital cash and may be redeemed automatically with your ship's computer."
			>

		<Image imageID="&rsItems1;" imageX="192" imageY="96" imageWidth="96" imageHeight="96"/>

		<StaticData>
			<Data id="card.balance">(rollDice 8 24)</Data>
		</StaticData>
	</ItemType>

	<!-- Cash Card, Gold -->

	<ItemType UNID="&itCashCardGold;"
			name=				"gold cash card"
			attributes=			"cashCard, consumable, cannotOrder, humanTech"
			inherit=			"&baCashCard;"

			level=				"4"
			frequency=			"rare"

			value=				"1000"
			mass=				"1"
			unknownType=		"&itUnknownROM;, &itUnknownROMB;, &itUnknownROMC;"

			description=		"This ROM stores digital cash and may be redeemed automatically with your ship's computer."
			>

		<Image imageID="&rsItems1;" imageX="192" imageY="96" imageWidth="96" imageHeight="96"/>

		<StaticData>
			<Data id="card.balance">(rollDice 8 249)</Data>
		</StaticData>
	</ItemType>

	<!-- Cash Card, Platinum -->

	<ItemType UNID="&itCashCardPlatinum;"
			name=				"platinum cash card"
			attributes=			"cashCard, consumable, cannotOrder, humanTech"
			inherit=			"&baCashCard;"

			level=				"6"
			frequency=			"rare"

			value=				"10000"
			mass=				"1"
			unknownType=		"&itUnknownROM;, &itUnknownROMB;, &itUnknownROMC;"

			description=		"This ROM stores digital cash and may be redeemed automatically with your ship's computer."
			>

		<Image imageID="&rsItems1;" imageX="192" imageY="96" imageWidth="96" imageHeight="96"/>

		<StaticData>
			<Data id="card.balance">(rollDice 8 2499)</Data>
		</StaticData>
	</ItemType>

	<!-- Data ROM 

	EXTRA DATA

	text:			The document contents of the data ROM should be stored in this data variable
					(itmSetData theItem "text" "{the document content}")

	-->

	<ItemType UNID="&itDataROM;"
			name=				"data ROM"
			level=				"1"
			value=				"0"
			mass=				"1"
			frequency=			"notrandom"
			attributes=			"humanTech, Info; MinorItem; NotForSale"

			description=		"Data ROMs are used to store everything from personal mail to ship's logs."

			useScreen=			"&dsUseDataROM;"
			>

		<Image imageID="&rsItems1;" imageX="192" imageY="96" imageWidth="96" imageHeight="96"/>

	</ItemType>

	<!-- Neurohack ROM -->

	<ItemType UNID="&itNeurohackROM;"
			name=				"neurohack ROM"
			level=				"10"
			value=				"500"
			mass=				"1"
			frequency=			"notrandom"
			unknownType=		"&itUnknownROM;, &itUnknownROMB;, &itUnknownROMC;"
			attributes=			"humanTech, info, minorItem, neurohackROM, notForSale, questItem"

			description=		"This ROM enables you to connect to AIs and subdue them."
			
			charges=			"3"
			valueCharges=		"true"
			>

		<Image imageID="&rsItems1;" imageX="192" imageY="96" imageWidth="96" imageHeight="96"/>
		
		<Invoke>
			(objSendMessage gSource Nil (typTranslate gType 'msgResult))
		</Invoke>

		<Language>
			<Text id="core.charges">charge(s)</Text>
			<Text id="msgResult">Dock with AI to begin neurohack</Text>
		</Language>
	</ItemType>

	<!-- ROM: enhance visual display -->

	<ItemType UNID="&itEnhanceSRSROM;"
			name=				"visual display enhancement ROM"
			attributes=			"humanTech, info, minorItem, shipEquipment"
			inherit=			"&baStdEquipmentItem;"

			level=				"2"
			frequency=			"common"

			value=				"150"
			mass=				"1"
			unknownType=		"&itUnknownROM;, &itUnknownROMB;, &itUnknownROMC;"

			description=		"This ROM enhances a ship's visual display to show the bearing of ships and stations beyond normal visual range."
			>

		<Properties>
			<Constant id="rpg.equipment">'srsEnhancer</Constant>
			<Constant id="rpg.alternateEquipment">'srs</Constant>
		</Properties>

		<Image imageID="&rsItems1;" imageX="192" imageY="96" imageWidth="96" imageHeight="96"/>

		<Language>
			<Text id="rpg.equipmentInstalled">Visual display enhanced</Text>
			<Text id="rpg.equipmentNoEffect">Visual display already enhanced</Text>
			<Text id="rpg.equipmentRedundant">Visual display already enhanced</Text>
			<Text id="rpg.equipmentRepaired">Visual display repaired</Text>
		</Language>
	</ItemType>

	<!-- ROM: Defective visual display -->

	<ItemType UNID="&itSRSDamageROM;"
			name=				"defective visual display ROM"
			level=				"2"
			value=				"5"
			mass=				"1"
			frequency=			"uncommon"
			unknownType=		"&itUnknownROM;, &itUnknownROMB;, &itUnknownROMC;"
			attributes=			"defective, humanTech, info, minorItem, shipEquipment"

			description=		"This ROM would normally enhance a ship's visual display, but a manufacturing defect makes it worse than useless. Plugging this in to your ship's computer will temporarily damage your display screen."

			sortName=			"visual display ROM, defective"
			>

		<Image imageID="&rsItems1;" imageX="192" imageY="96" imageWidth="96" imageHeight="96"/>

		<Invoke>
			(block Nil
				(objChangeEquipmentStatus gSource 'SRS 'damage 3000)
				(objSendMessage gSource Nil (typTranslate gType 'msgResult))

				; Identify the item
				(itmSetKnown gItem)

				; Remove ROM
				(objRemoveItem gSource gItem 1)
				)
		</Invoke>

		<Language>
			<Text id="msgResult">ROM failure: Visual display temporarily blinded</Text>
		</Language>
	</ItemType>

	<!-- System Map ROM -->

	<ItemType UNID="&itSystemMapROM;"
			name=				"system map ROM"
			level=				"2"
			value=				"100"
			mass=				"1"
			frequency=			"uncommon"
			unknownType=		"&itUnknownROM;, &itUnknownROMB;, &itUnknownROMC;"
			attributes=			"consumable, humanTech, info, systemMap"

			description=		"This program accesses the central cartography libraries to generate a map of the current system."
			>

		<Image imageID="&rsItems1;" imageX="192" imageY="96" imageWidth="96" imageHeight="96"/>

		<Invoke>
			(block (mappedAll mapEnemy)
				(setq mappedAll True)

				; Compute the probability of mapping an enemy station
				(switch
					(geq (sysGetLevel) 7)
						(setq mapEnemy 0)

					(geq (sysGetLevel) 3)
						(setq mapEnemy (subtract 360 (multiply 72 (subtract (sysGetLevel) 2))))

					(setq mapEnemy 360)
					)

				; Iterate over all ships and stations in the system we might want to reveal
				(enum (sysFindObject gSource "Ts +property:hasDockingPorts; -property:known;") obj
					(switch
						(and (objMatches obj Nil "T -property:showMapLabel;")
							(not (objMatches obj gSource "*F +majorStation;"))
							)
							Nil
							
						(and (objIsEnemy gSource obj)
							(geq (objGetDestiny obj) mapEnemy)
							)
							(setq mappedAll Nil)

						(objHasAttribute obj "uncharted")
							(setq mappedAll Nil)

						(block Nil
							(objSetKnown obj)
							(enum (objGetProperty obj 'subordinates) sub
								(if (objMatches sub Nil 'T) (objSetKnown sub))
								)
							)
						)
					)

				(if mappedAll
					(objSendMessage gSource Nil (typTranslate &itSystemMapROM; 'mappedAll))
					(objSendMessage gSource Nil (typTranslate &itSystemMapROM; 'mappedCharted))
					)

				; Identify the item
				(itmSetKnown gItem)

				; Remove ROM
				(objRemoveItem gSource gItem 1)
				)
		</Invoke>
		
		<Language>
			<Text id="mappedAll">Mapped all stations in system</Text>
			<Text id="mappedCharted">Mapped charted stations in system</Text>
		</Language>
	</ItemType>

	<!-- Military System Map ROM -->

	<ItemType UNID="&itMilitaryMapROM;"
			name=				"military map ROM"
			level=				"4"
			value=				"500"
			mass=				"1"
			frequency=			"uncommon"
			unknownType=		"&itUnknownROM;, &itUnknownROMB;, &itUnknownROMC;"
			attributes=			"consumable, humanTech, info, military, systemMap"

			description=		"This program accesses military databases to generate a map of enemy stations in the system."
			>

		<Image imageID="&rsItems1;" imageX="192" imageY="96" imageWidth="96" imageHeight="96"/>

		<Invoke>
			(block Nil
				(if	(not (sysFindObject gSource "TsA +commonwealth; +property:hasDockingPorts;"))

					; If there are no commonwealth stations in the system, then we cannot function
					(objSendMessage gSource Nil (typTranslate &itMilitaryMapROM; 'unableToConnect))

					; Otherwise, we map all enemy stations
					(block Nil
						(enum (sysFindObject gSource "ETs") obj
							(objSetKnown obj)
							)

						(objSendMessage gSource Nil (typTranslate &itMilitaryMapROM; 'mappedEnemies))

						; Remove ROM
						(objRemoveItem gSource gItem 1)
						)
					)

				; Identify the item
				(itmSetKnown gItem)
				)
		</Invoke>
		
		<Language>
			<Text id="unableToConnect">Unable to connect to military cartography in this system</Text>
			<Text id="mappedEnemies">Mapped all enemy stations in system</Text>
		</Language>
	</ItemType>

	<!-- Targeting Computer ROM -->

	<ItemType UNID="&itTargetingComputerROM;"
			name=				"targeting program ROM"
			attributes=			"humanTech, info, minorItem, shipEquipment"
			inherit=			"&baStdEquipmentItem;"

			level=				"3"
			frequency=			"uncommon"

			value=				"300"
			mass=				"1"
			unknownType=		"&itUnknownROM;, &itUnknownROMB;, &itUnknownROMC;"

			description=		"A targeting program is required to aim guided missiles such as the KM500 Stiletto."
			>

		<Properties>
			<Constant id="rpg.equipment">'targetingComputer</Constant>
		</Properties>

		<Image imageID="&rsItems1;" imageX="192" imageY="96" imageWidth="96" imageHeight="96"/>

		<Language>
			<Text id="rpg.equipmentInstalled">Targeting program installed</Text>
			<Text id="rpg.equipmentNoEffect">Ship already has a targeting program</Text>
			<Text id="rpg.equipmentRedundant">Installed redundant targeting system</Text>
			<Text id="rpg.equipmentRepaired">Targeting system repaired</Text>
		</Language>
	</ItemType>

	<!-- Trading Computer ROM -->

	<ItemType UNID="&itTradingComputerROM;"
			name=				"trading computer ROM"
			attributes=			"humanTech, info, minorItem, shipEquipment"
			inherit=			"&baStdEquipmentItem;"

			level=				"2"
			frequency=			"rare"

			value=				"300"
			mass=				"1"
			unknownType=		"&itUnknownROM;, &itUnknownROMB;, &itUnknownROMC;"

			description=		"A trading computer tracks prices for known stations and suggests the best place to sell commodities."
			>

		<Properties>
			<Constant id="rpg.equipment">'tradingComputer</Constant>
		</Properties>

		<Image imageID="&rsItems1;" imageX="192" imageY="96" imageWidth="96" imageHeight="96"/>

		<Language>
			<Text id="rpg.equipmentInstalled">Trading computer installed</Text>
			<Text id="rpg.equipmentNoEffect">Ship already has a trading computer</Text>
			<Text id="rpg.equipmentRedundant">Redundant trading computer installed</Text>
			<Text id="rpg.equipmentRepaired">Trading computer repaired</Text>
		</Language>
	</ItemType>

<!-- BASE CLASSES -->

	<ItemType unid="&baCashCard;"
			name=			"(cash card base)"
			virtual=		"true"
			level=			"1"
			>
		<Invoke>
			(block (
				(amount (or
					(itmGetData gItem 'card.balance)
					(eval (itmGetStaticData gItem 'card.balance))
					))
				)
				;	Give money to whomever invoked it.

				(objSendMessage gSource Nil (typTranslate gType 'msgCashDeposited {
					amount: (fmtCurrency 'credit amount)
					}))
				(objCredit gSource amount)

				;	Remove the item and identify it.

				(itmSetKnown gItem)
				(objRemoveItem gSource gItem 1)
				)
		</Invoke>

		<Events>
			<GetTradePrice>
				(or (itmGetData gItem 'card.balance)
					(itmGetPrice gItem)
					)
			</GetTradePrice>
		</Events>

		<Language>
			<Text id="msgCashDeposited">
				%amount% deposited to your account.
			</Text>
		</Language>
	</ItemType>

</TranscendenceModule>
