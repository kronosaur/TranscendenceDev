<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

<!-- COMMODITIES EXCHANGE ======================================================

	This screen allows the player to buy and sell items according to the 
	<Trade> settings.

	PROPERTIES

		rpg.checkMilitaryID: Specifies whether or not we require the player to 
			have a military ID before selling them military items (items with
			the military attribute).

			If True, then we look for an ID with the military attribute. If a
			string, then we assume it is an item criteria for the required
			military ID (for example, Eurasian Diarchy uses this to require a
			special letter or marque).

			If not specified, we inherit the property from the object (or we use
			(@ gData 'checkMilitaryID) for backwards compatibility).

		rpg.showActualItem: If True, we show actual item names even if they are
			unknown to the player. If the player purchases one of these unknown
			items, they become known to them.

			If Nil, then the player does not know what they are buying.

			If not specified, we inherit the property from the object.

		rpg.sourceObj: If not Nil, use this as the object for inventory 
			purposes. That is, the list of items to buy comes from this object.

			NOTE: <Trade> descriptors still come from gSource.

	LANGUAGE

		core.commoditiesExchangeDesc: If the source object has this text ID, 
			then we use it as the screen description. Otherwise we use a 
			default.
	
-->
	
	<DockScreen unid="&dsRPGCommoditiesExchange;"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			>
		<Properties>
			<Variant id="rpg.buyCriteria">(@ gData 'buyCriteria)</Variant>
			<Variant id="rpg.checkMilitaryID">(or (objGetProperty gSource 'rpg.checkMilitaryID) (@ gData 'checkMilitaryID))</Variant>
			<Variant id="rpg.sellCriteria">(@ gData 'sellCriteria)</Variant>
			<Variant id="rpg.showActualItem">(or (objGetProperty gSource 'rpg.showActualItem) (@ gData 'showActualItem))</Variant>
			<Variant id="rpg.sourceObj">(@ gData 'sourceObj)</Variant>
		</Properties>

		<Panes>
			<Default>
				<OnPaneInit>
					(scrSetDesc gScreen (or
						(scrTranslate gScreen 'core.commoditiesExchangeDesc { stationName:(objGetName gSource) })
						(scrTranslate gScreen 'commoditiesExchangeScreenDesc { stationName:(objGetName gSource) })
						))
				</OnPaneInit>
				
				<Actions>
					<Action id="actionBuyItems" default="1">
						(scrShowScreen gScreen &dsRPGCommoditiesExchangeBuy; {
							rpg.criteria: (scrGetProperty gScreen 'rpg.buyCriteria)
							rpg.checkMilitaryID: (scrGetProperty gScreen 'rpg.checkMilitaryID)
							rpg.sourceObj: (scrGetProperty gScreen 'rpg.sourceObj)
							})
					</Action>

					<Action id="actionSellItems">
						(scrShowScreen gScreen &dsRPGCommoditiesExchangeSell; {
							rpg.criteria: (scrGetProperty gScreen 'rpg.sellCriteria)
							rpg.sourceObj: (scrGetProperty gScreen 'rpg.sourceObj)
							})
					</Action>

					<Action id="actionDone" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>
		
		<Language>
			<Text id="actionBuyItems">[B]uy Items</Text>
			<Text id="actionSellItems">[S]ell Items</Text>
			
			<Text id="core.commoditiesExchangeDesc">

				Welcome to the %stationName% Commodities Exchange Market.

			</Text>
		</Language>
	</DockScreen>

<!-- COMMODITIES EXCHANGE BUY ==================================================

	This screen allows the player to buy items from a station. We use the 
	<Trade> directives on the station to determine inventory and price.

	PROPERTIES

		rpg.checkMilitaryID: See dsRPGCommoditiesExchange.

		rpg.criteria: If non-nil, we restrict sales to items matching this 
			criteria. [For backwards compatibility, this defaults to 
			(@ gData 'criteria).]

		rpg.showActualItem: See dsRPGCommoditiesExchange.

		rpg.sourceObj: See dsRPGCommoditiesExchange.

	gData uses the following fields:
	
		listFilter: If non-nil, this is a function to use as a filter of items
				for the player to buy.
				
-->
	
	<DockScreen unid="&dsRPGCommoditiesExchangeBuy;"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			>
		
		<Properties>
			<Variant id="rpg.checkMilitaryID">(or (objGetProperty gSource 'rpg.checkMilitaryID) (@ gData 'checkMilitaryID))</Variant>
			<Variant id="rpg.criteria">(@ gData 'criteria)</Variant>
			<Variant id="rpg.showActualItem">(or (objGetProperty gSource 'rpg.showActualItem) (@ gData 'showActualItem))</Variant>
			<Variant id="rpg.sourceObj">(@ gData 'sourceObj)</Variant>
		</Properties>

		<OnScreenInit>
			;	If we're showing actual items, reset the unknown type index 
			;	so that unknown items collapse into the same type.

			(if (scrGetProperty gScreen 'rpg.showActualItem)
				(block (
					(sourceObj (or (scrGetProperty gScreen 'rpg.sourceObj) gSource))
					)
					(enum (objGetItems sourceObj "*U +property:unknownType") theItem
						(objSetItemProperty sourceObj theItem 'unknownTypeIndex 0 (itmGetCount theItem))
						)
					)
				)
		</OnScreenInit>

		<Display type="itemPicker"
				dataFrom=	"=(or (scrGetProperty gScreen 'rpg.sourceObj) 'station)"
				list=		"*"
				>
			<OnDisplayInit>
				(block (
					(itemCriteria (scrGetProperty gScreen 'rpg.criteria))
					(sourceObj (or (scrGetProperty gScreen 'rpg.sourceObj) gSource))
					)
				
					(switch
						;	If we specify a function, use that
					
						(@ gData 'listFilter)
							(scrSetListFilter gScreen (@ gData 'listFilter))
						
						;	Backwards compatibility
					
						(@ gData 'showInstallables)
							(scrSetListFilter gScreen rpgCalcSellPrice)

						;	Categorize items into tabs

						(rpgCreateBuyItemTabs itemCriteria)
						)

					;	We set the underlying engine property based on inputs.

					(scrSetProperty gScreen 'showActualItem (scrGetProperty gScreen 'rpg.showActualItem))
					)
			</OnDisplayInit>
		</Display>
		
		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(thisItem (scrGetItem gScreen))
						
						;	Compute the cost of this item.
						
						(currencyUsed (objGetDefaultCurrency gSource))
						(flags {
							actual: (scrGetProperty gScreen 'rpg.showActualItem)
							})
						(rawCost (objGetSellPrice gSource thisItem flags))
						(itemCost (if rawCost rawCost 0))
						
						;	Items available
						
						(availCount (itmGetCount thisItem))
						
						;	How many items can we afford?
						;	NOTE: If price is 0 it means not for sale.
						
						(affordCount (if (gr itemCost 0)
							(divide (objGetBalance gPlayerShip currencyUsed) itemCost)
							0
							))
							
						;	Mark up
						
						(baseCost (itmGetPrice thisItem {
							actual: (scrGetProperty gScreen 'rpg.showActualItem)
							currency: currencyUsed
							}))
						(itemMarkup (if (gr itemCost 0) (- itemCost baseCost) 0))
						(itemMarkupPercent (if (gr baseCost 0) (int (round (* (/ itemMarkup baseCost) 100)))))
							
						;	How many items can we fit?
						
						(fitCount (objGetFitCount gPlayerShip thisItem))

						;	Military?

						(militaryCheck (rpgCheckMilitaryID (scrGetProperty gScreen 'rpg.checkMilitaryID)))
						(militaryCount 
							(if (and (itmHasAttribute thisItem 'military)
									(!= militaryCheck True)
									)
								0
								(itmGetCount thisItem)
								)
							)
						
						;	Max items we can buy
						
						(maxCount (min availCount affordCount fitCount militaryCount))

						;	How many of this item do we already have?

						(countInCargo (objHasItem gPlayerShip thisItem 1))
						
						;	Can this item be installed?
						
						(installResult (rpgInstallDevicePrep {
							item: thisItem

							buyAndInstall: True
							checkMilitaryID: (scrGetProperty gScreen 'rpg.checkMilitaryID)
							checkTotalPower: True
							currencyUsed: currencyUsed
							installerObj: gSource
							itemInCargo: True
							showActualItem: (scrGetProperty gScreen 'rpg.showActualItem)
							}))
						
						(tradeData (rpgItemTradeComputer thisItem rawCost currencyUsed))
						)
						
						;	Set the description
						
						(switch
							(not thisItem)
								(scrSetDescTranslate gScreen 'errorNoItemsToBuy)
								
							(scrSetDesc gScreen
								(scrTranslate gScreen 'descItemStats {
									value: (if (gr itemCost 0) (fmtCurrency currencyUsed itemCost))
									markup: (if (geq itemMarkup 0) (fmtCurrency currencyUsed itemMarkup))
									discount: (if (ls itemMarkup 0) (fmtCurrency currencyUsed (abs itemMarkup)))
									markupPercent: (abs itemMarkupPercent)
									max: (if (gr maxCount 1) maxCount)
									maxValue: (fmtCurrency currencyUsed (multiply itemCost maxCount))
									mass: (fmtNumber 'massKg (itmGetMass thisItem))
									maxMass: (fmtNumber 'massKg (multiply (itmGetMass thisItem) maxCount))
									})

								;	If the player has some in their cargo hold, then say so here.

								(switch
									countInCargo
										(scrTranslate gScreen 'descInCargo { itemName:(itmGetName (itmSetCount thisItem countInCargo) 'countAlways) })
									)

								;	If there is some restriction (not enough money, etc.) then explain it
								;	here.
									
								(switch
									(eq itemCost 0)
										(scrTranslate gScreen 'descNotForSale)

									(eq militaryCount 0)
										(scrTranslate gScreen 'descNoMilitaryID {
											theItem:thisItem 
											militaryID:(@ militaryCheck 'idName)
											})
										
									(eq affordCount 0)
										(scrTranslate gScreen 'descNotEnoughMoney { currency: (fmtCurrency currencyUsed True) })
										
									(eq fitCount 0)
										(scrTranslate gScreen 'descNotEnoughRoom)
										
									(and (gr availCount affordCount) (gr fitCount affordCount))
										(scrTranslate gScreen 'descNotEnoughMoneyForAll { currency: (fmtCurrency currencyUsed True) value: affordCount })
										
									(and (gr availCount fitCount))
										(scrTranslate gScreen 'descNotEnoughRoomForAll { value: fitCount })
									)
								
								;	Trade computer
								
								(if tradeData
									(cat "\n\n" (@ tradeData 'sellRecommendation))
									)
								)
							)

						;	Warnings

						(switch
							(and (itmMatches thisItem "M")
									(not (objGetItemProperty gPlayerShip thisItem 'canBeFired))
									)
								(scrSetControlValueTranslate gScreen 'descWarning 'warningLauncherNeeded {
									itemName: (itmGetName thisItem '(short plural))
									launcherName: (itmGetName (@ (itmGetProperty thisItem 'weaponTypes) 0) 'article)
									})

							(and (itmMatches thisItem "m")
									(not (objGetItemProperty gPlayerShip thisItem 'canBeFired))
									)
								(scrSetControlValueTranslate gScreen 'descWarning 'warningWeaponNeeded {
									itemName: (itmGetName thisItem '(short plural))
									launcherName: (itmGetName (@ (itmGetProperty thisItem 'weaponTypes) 0) 'article)
									})
							)
							
						;	Remember some computed values
						
						(scrSetData gScreen 'maxCount maxCount)
						(scrSetData gScreen 'itemCost itemCost)
						
						;	Remember installation result
						
						(if (@ installResult 'canInstall)
							(scrSetData gScreen 'installResult installResult)
							(scrSetData gScreen 'installResult Nil)
							)
							
						;	Enable/disable actions
						
						(scrEnableAction gScreen 'actionBuy (gr maxCount 0))
						)
				</OnPaneInit>
				
				<Controls>
					<Text id="desc"/>
					<Text id="descWarning" style="warning"/>
				</Controls>
				
				<Actions>
					<Action id="actionBuy" default="1">
						(block (
							(thisItem (scrGetItem gScreen))
							(maxCount (scrGetData gScreen 'maxCount))
							(itemCost (scrGetData gScreen 'itemCost))
							(installResult (scrGetData gScreen 'installResult))
							)
							
							(switch
								;	Ask for a quantity, if necessary
								
								(gr maxCount 1)
									(scrShowPane gScreen "BuyQuantity")
									
								;	Can we install this item?
								
								installResult
									(scrShowPane gScreen "InstallItem")
									
								;	Otherwise, complete transaction
									
								(block Nil
									(if (scrGetProperty gScreen 'rpg.showActualItem)
										(itmSetKnown thisItem)
										)

									(rpgBuyItems 1 itemCost)
									(scrShowPane gScreen "Default")
									)
								)
							)
					</Action>
					
					<Action id="actionDone" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
			
			<BuyQuantity
					showCounter=	"true">

				<OnPaneInit>
					(block (
						(maxCount (scrGetData gScreen 'maxCount))
						(itemCost (scrGetData gScreen 'itemCost))
						)
						
						(scrSetDescTranslate gScreen 'descBuyQuantity { value: (fmtCurrency (objGetDefaultCurrency gSource) itemCost) })
						(scrSetCounter gScreen maxCount)
						)
				</OnPaneInit>

				<Actions>
					<Action id="actionBuy" default="1">
						(block (
							(thisItem (scrGetItem gScreen))
							(countToBuy (scrGetCounter gScreen))
							(maxCount (scrGetData gScreen 'maxCount))
							(itemCost (scrGetData gScreen 'itemCost))
							(installResult (scrGetData gScreen 'installResult))
							)
							
							(switch
								(gr countToBuy maxCount)
									(scrSetCounter gScreen maxCount)
									
								(and (eq countToBuy 1) installResult)
									(scrShowPane gScreen "InstallItem")
									
								(block Nil
									(if (scrGetProperty gScreen 'rpg.showActualItem)
										(itmSetKnown thisItem)
										)

									(rpgBuyItems countToBuy itemCost)
									(scrShowPane gScreen "Default")
									)
								)
							)
					</Action>

					<Action id="actionCancel" cancel="1">
						<ShowPane pane="Default"/>
					</Action>
				</Actions>
			</BuyQuantity>
			
			<InstallItem
					noListNavigation="true"
					>
				<OnPaneInit>
					(block (
						(thisItem (scrGetItem gScreen))
						(itemCost (scrGetData gScreen 'itemCost))
						(currencyUsed (objGetDefaultCurrency gSource))
						(installResult (scrGetData gScreen 'installResult))
						(installCost (@ installResult 'price))
						(installDesc (@ installResult 'desc))
						(canInstall Nil)
						)
						
						(switch
							(gr installCost (objGetBalance gPlayerShip currencyUsed))
								(scrSetDescTranslate gScreen 'descNotEnoughMoneyToInstall { installDesc: installDesc value: (fmtCurrency currencyUsed itemCost) })
								
							(block Nil
								(scrSetDescTranslate gScreen 'descBuyOrInstall { 
									installDesc: installDesc
									buyValue: (fmtCurrency currencyUsed itemCost) 
									installValue: (fmtCurrency currencyUsed installCost) 
									})
								(setq canInstall True)
								)
							)
							
						(scrEnableAction gScreen 'actionBuyAndInstall canInstall)
						)
				</OnPaneInit>

				<Actions>
					<Action id="actionBuyAndInstall" default="1">
						(block (
							(itemInstalled (scrGetItem gScreen))
							(itemCost (scrGetData gScreen 'itemCost))
							(installResult (scrGetData gScreen 'installResult))
							(installCost (@ installResult 'price))
							)
								
							(scrSetData gScreen 'itemInstalled itemInstalled)
								
							(if (scrGetProperty gScreen 'rpg.showActualItem)
								(itmSetKnown itemInstalled)
								)

							(rpgBuyItems 1 installCost)
								
							(shpInstallDevice gPlayerShip itemInstalled)
							(typSetData &svPlayer; 'tutorialInstalled True)
							(scrShowPane gScreen "InstallSuccess")
							)
					</Action>

					<Action id="actionBuyOnly">
						(block (
							(thisItem (scrGetItem gScreen))
							(itemCost (scrGetData gScreen 'itemCost))
							)
							
							(if (scrGetProperty gScreen 'rpg.showActualItem)
								(itmSetKnown thisItem)
								)

							(rpgBuyItems 1 itemCost)
							(scrShowPane gScreen "Default")
							)
					</Action>

					<Action id="actionCancel" cancel="1">
						(scrShowPane gScreen "Default")
					</Action>
				</Actions>
			</InstallItem>
			
			<InstallSuccess
					noListNavigation="true"
					>
				<OnPaneInit>
					(scrSetDescTranslate gScreen 'descInstallationSuccessful { 
						item: (scrGetData gScreen 'itemInstalled)
						})
				</OnPaneInit>

				<Actions>
					<Action id="actionContinue" default="1" cancel="1">
						(scrShowPane gScreen "Default")
					</Action>
				</Actions>
			</InstallSuccess>
		</Panes>
		
		<Language>
			<Text id="actionBuy">[B]uy</Text>
			<Text id="actionBuyAndInstall">Buy &amp; [I]nstall</Text>
			<Text id="actionBuyOnly">[B]uy Only</Text>
			<Text id="actionShowInstallables">[S]how Dock Service Items</Text>
			<Text id="actionHideInstallables">[H]ide Dock Service Items</Text>
			
			<Text id="descItemStats">
				(if (@ gData 'max)
					(cat
						"Unit price: " (@ gData 'value) " (" (@ gData 'max) " for " (@ gData 'maxValue) ")\n"
						"Unit mass: " (@ gData 'mass) " (" (@ gData 'max) " for " (@ gData 'maxMass) ")\n"
						(if (@ gData 'markup) 
							(cat "Unit markup: " (@ gData 'markup) " (" (@ gData 'markupPercent) "%)")
							(cat "Unit discount: " (@ gData 'discount) " (" (@ gData 'markupPercent) "%)")
							)
						)
					(cat
						"Unit price: " (@ gData 'value) "\n"
						"Unit mass: " (@ gData 'mass) "\n"
						(if (@ gData 'markup) 
							(cat "Unit markup: " (@ gData 'markup) " (" (@ gData 'markupPercent) "%)")
							(cat "Unit discount: " (@ gData 'discount) " (" (@ gData 'markupPercent) "%)")
							)
						)
					)
			</Text>
			<Text id="descInCargo">
				\n\nYou have %itemName% in your cargo hold.
			</Text>
			<Text id="descBuyOrInstall">

				%installDesc%
					
				Do you wish to buy and install it for %installValue%,
				or do you wish to only buy it for %buyValue%?

			</Text>
			<Text id="descNotForSale">
				\n\nThis item is not for sale.
			</Text>
			<Text id="descNoMilitaryID">
				\n\nYou need %militaryID% to buy this item.
			</Text>
			<Text id="descNotEnoughMoney">
				\n\nYou do not have enough %currency% to purchase any.
			</Text>
			<Text id="descNotEnoughMoneyToInstall">

				%installDesc%
					
				Unfortunately, you cannot afford the installation cost.
				Do you wish to buy it without installation for %value%?

			</Text>
			<Text id="descNotEnoughRoom">
				\n\nUnfortunately, you cannot fit any in your cargo hold.
			</Text>
			<Text id="descNotEnoughMoneyForAll">
				\n\nYou have enough %currency% to buy %value%.
			</Text>
			<Text id="descNotEnoughRoomForAll">
				\n\nYou have enough room in your cargo hold to carry %value%.
			</Text>
			<Text id="descBuyQuantity">
				How many items do you wish to purchase at %value% each?
			</Text>
			<Text id="descInstallationSuccessful">
				(cat 
					(itmGetName (@ gData 'item) 0x01) " installed successfully."
					)
			</Text>

			<Text id="warningLauncherNeeded">
				You must install %launcherName% to fire %itemName%.
			</Text>
			<Text id="warningWeaponNeeded">
				You must install %launcherName% to use %itemName%.
			</Text>
			
			<Text id="errorNoItemsToBuy">There are no items available for sale.</Text>
		</Language>
	</DockScreen>
	
<!-- COMMODITIES EXCHANGE SELL =================================================

	This screen allows the player to sell items to a station. We use the 
	<Trade> directives on the station to determine inventory and price.

	PROPERTIES

		rpg.sourceObj: See dsRPGCommoditiesExchange.

	gData uses the following fields:
	
		criteria: If non-nil, we restrict sales to items matching this 
				criteria.

		listFilter: If non-nil, this is a function to use as a filter of items
				for the player to sell.

		maxPrice: If non-nil, this is the maximum price we will pay for a single
				item.

		priceCalc: If non-nil, then use this function to compute the price to
				pay. Otherwise, we use the normal Trade descriptors
				
		title: Title for screen (or Nil for station name)
-->
	
	<DockScreen UNID="&dsRPGCommoditiesExchangeSell;"
			name=				"=(or (@ gData 'title) (objGetName gSource 'titleCapitalize))"
			type=				"itemPicker"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			>
		<Properties>
			<Variant id="rpg.criteria">(@ gData 'criteria)</Variant>
			<Variant id="rpg.sourceObj">(@ gData 'sourceObj)</Variant>
		</Properties>

		<ListOptions
				dataFrom=	"player"
				list=		"*U"
				>
			(block (
				(itemCriteria (scrGetProperty gScreen 'rpg.criteria))
				)
				(switch
					;	If we specify an item criteria, then create a function
					;	that will filter.
					
					(and itemCriteria
							(not (eq itemCriteria "*"))
							)
						(scrSet@ gScreen 'enabledFilter (lambda (theItem)
							(switch
								(not (itmMatches theItem itemCriteria))
									Nil
								
								(rpgCalcBuyPrice theItem)
								)
							))
							
					;	If we specify a function, use that
					
					(@ gData 'listFilter)
						(scrSet@ gScreen 'enabledFilter (@ gData 'listFilter))
						
					;	Otherwise, we sell everything listed in our Trade
					;	directives.
					
					(scrSet@ gScreen 'enabledFilter rpgCalcBuyPrice)
					)
				)
		</ListOptions>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(title (or (@ gData 'title) (objGetName gSource '(demonstrative capitalize))))
						(thisItem (scrGetItem gScreen))
						
						;	Compute the cost of this item
						
						(currencyUsed (objGetDefaultCurrency gSource))
						(itemCost
							(switch
								(not (scr@ gScreen 'selectionEnabled))
									Nil

								(@ gData 'priceCalc)
									(apply (@ gData 'priceCalc) thisItem Nil)

								(objGetBuyPrice gSource thisItem)
								)
							)
						
						;	Get some counts
						
						(availCount (itmGetCount thisItem))

						(existingCount (objHasItem gSource thisItem 1))
						(averageCount (itmGetAverageAppearing thisItem))
						(maxExistingCount 
							(switch
								(itmMatches thisItem "amdu")
									(* averageCount 5)

								;	For most commodities, the limit is from 5 to 21 times the
								;	average count.

								(* averageCount
									(seededRandom 
										(* (itmGetType thisItem) (objGetProperty gSource 'destiny)) 
										15 30
										)
									)
								)
							)
						(maxBuyCount 
							(min availCount
								(max 0 (- maxExistingCount existingCount))
								)
							)

						;	Calc the price offered by the station
						
						(offerPrice
							(switch
								(not itemCost)
									0
									
								(not (itmIsKnown thisItem))
									(divide itemCost 10)
									
								itemCost
								)
							)
							
						;	Mark up
						
						(baseCost (itmGetPrice thisItem currencyUsed))
						(itemMarkup (if (gr offerPrice 0) (- offerPrice baseCost) 0))
						(itemMarkupPercent (if (gr baseCost 0) (int (round (* (/ itemMarkup baseCost) 100)))))
						
						;	Compute the number of items the station is willing
						;	to buy.
						
						(affordCount
							(switch
								(= offerPrice 0)
									0

								(and (@ gData 'maxPrice) (gr offerPrice (@ gData 'maxPrice)))
									0
									
								(min availCount 
									(divide (objGetBalance gSource) offerPrice)
									)
								)
							)

						(offerCount (min affordCount maxBuyCount))

						(tradeData (rpgItemTradeComputer thisItem offerPrice currencyUsed))
						)
						
						;	Set the description
						
						(switch
							(not thisItem)
								(scrSetDescTranslate gScreen 'errorNoItemsToSell)
								
							(scrSetDesc gScreen
								;	The first part describes the item
								
								(if (gr offerPrice 0)
									(scrTranslate gScreen 'descItemStats {
										value: (if (gr offerPrice 0) (fmtCurrency currencyUsed offerPrice))
										markup: (if (geq itemMarkup 0) (fmtCurrency currencyUsed itemMarkup))
										discount: (if (ls itemMarkup 0) (fmtCurrency currencyUsed (abs itemMarkup)))
										markupPercent: (abs itemMarkupPercent)
										max: (if (gr offerCount 1) offerCount)
										maxValue: (fmtCurrency currencyUsed (multiply offerPrice offerCount))
										mass: (fmtNumber 'massKg (itmGetMass thisItem))
										maxMass: (fmtNumber 'massKg (multiply (itmGetMass thisItem) offerCount))
										})
									)

								(switch
									(= offerPrice 0)
										(or (scrTranslate gScreen 'rpg.stationWillNotBuy { title:title stationName:title itemName:(itmGetName thisItem '(plural escapeQuotes)) })
												(scrTranslate gScreen 'descNotForSale { title:title itemName:(itmGetName thisItem '(plural escapeQuotes)) })
												)
										
									(= affordCount 0)
										(scrTranslate gScreen 'descNotEnoughMoney { title:title itemName:(itmGetName thisItem '(article escapeQuotes)) })

									(= maxBuyCount 0)
										(scrTranslate gScreen 'descNotInterested { title:title itemName:(itmGetName thisItem '(plural escapeQuotes)) })

									(= availCount 1)
										(scrTranslate gScreen 'descBuyOnlyItem { title:title itemName:(itmGetName thisItem 'escapeQuotes) currency:(fmtCurrency currencyUsed offerPrice) })
										
									(= offerCount 1)
										(scrTranslate gScreen 'descBuySingleItem { title:title itemName:(itmGetName thisItem 'escapeQuotes) currency:(fmtCurrency currencyUsed offerPrice) })
										
									(ls offerCount availCount)
										(scrTranslate gScreen 'descBuySomeItems { title:title itemName:(itmGetName thisItem 'escapeQuotes) currency:(fmtCurrency currencyUsed offerPrice) offerCount:offerCount availCount:availCount })
										
									(scrTranslate gScreen 'descBuyAllItems { title:title itemName:(itmGetName thisItem 'escapeQuotes) currency:(fmtCurrency currencyUsed offerPrice) })
									)

								(if tradeData
									(cat "\n\n" (@ tradeData 'sellRecommendation))
									)
								)
							)
							
						;	Remember some computed values
						
						(scrSetData gScreen 'itemCost offerPrice)
						(scrSetData gScreen 'maxCount offerCount)
						
						;	Enable/disable actions
						
						(scrEnableAction gScreen 'actionSell (gr offerCount 0))
						)
				</OnPaneInit>

				<Actions>
					<Action id="actionSell" default="1">
						(block (
							(thisItem (scrGetItem gScreen))
							(maxCount (scrGetData gScreen 'maxCount))
							(itemCost (scrGetData gScreen 'itemCost))
							(sourceObj (or (scrGetProperty gScreen 'rpg.sourceObj) gSource))
							)
							
							(switch
								;	Confirm

								(and (itmMatches thisItem "m")
										(objGetItemProperty gPlayerShip thisItem 'canBeFired)
										)
									(scrShowPane gScreen 'ConfirmSell)

								;	Ask for quantity, if necessary
								
								(gr maxCount 1)
									(scrShowPane gScreen "SellQuantity")
									
								;	Done
								
								(block Nil
									(rpgSellItems 1 itemCost sourceObj)
									(scrSetReturnData gScreen 'sold True)
									(scrShowPane gScreen "Default")
									)
								)
							)
					</Action>

					<Action id="actionDone" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>

			<ConfirmSell>
				<OnPaneInit>
					(block (
						(thisItem (scrGetItem gScreen))
						)
						(switch
							(itmMatches thisItem "m")
								(scrSetDescTranslate gScreen 'warningSellAmmo {
									itemName: (itmGetName thisItem '(plural escapeQuotes))
									})
							)
						)
				</OnPaneInit>

				<Actions>
					<Action id="actionYes" default="1">
						(block (
							(thisItem (scrGetItem gScreen))
							(maxCount (scrGetData gScreen 'maxCount))
							(itemCost (scrGetData gScreen 'itemCost))
							(sourceObj (or (scrGetProperty gScreen 'rpg.sourceObj) gSource))
							)
							(switch
								(gr maxCount 1)
									(scrShowPane gScreen 'SellQuantity)

								(block Nil
									(rpgSellItems 1 itemCost sourceObj)
									(scrSetReturnData gScreen 'sold True)
									(scrShowPane gScreen 'Default)
									)
								)
							)
					</Action>

					<Action id="actionNo" cancel="1">
						(scrShowPane gScreen 'Default)
					</Action>
				</Actions>
			</ConfirmSell>

			<SellQuantity
					showCounter=	"true">

				<OnPaneInit>
					(block (
						(maxCount (scrGetData gScreen 'maxCount))
						(itemCost (scrGetData gScreen 'itemCost))
						)
						
						(scrSetDescTranslate gScreen 'descSellQuantity { value: (fmtCurrency (objGetDefaultCurrency gSource) itemCost) })
						(scrSetCounter gScreen maxCount)
						)
				</OnPaneInit>

				<Actions>
					<Action id="actionSell" default="1">
						(block (
							(thisItem (scrGetItem gScreen))
							(countToSell (scrGetCounter gScreen))
							(maxCount (scrGetData gScreen 'maxCount))
							(itemCost (scrGetData gScreen 'itemCost))
							(sourceObj (or (scrGetProperty gScreen 'rpg.sourceObj) gSource))
							)
							
							(switch
								(gr countToSell maxCount)
									(scrSetCounter gScreen maxCount)
									
								(block Nil
									(rpgSellItems countToSell itemCost sourceObj)
									(scrSetReturnData gScreen 'sold True)
									(scrShowPane gScreen "Default")
									)
								)
							)
					</Action>

					<Action id="actionCancel" cancel="1">
						<ShowPane pane="Default"/>
					</Action>
				</Actions>
			</SellQuantity>
		</Panes>

		<Language>
			<Text id="actionSell">[S]ell</Text>
			
			<Text id="descItemStats">
				(cat
					(if (@ gData 'max)
						(typTranslate gType 'descItemStatsMultiple gData)
						(typTranslate gType 'descItemStatsSingle gData)
						)
					"\n"
					(if (@ gData 'markup) 
						(typTranslate gType 'descMarkup gData)
						(typTranslate gType 'descDiscount gData)
						)
					"\n\n"
					)
			</Text>

			<Text id="descItemStatsMultiple">
				Unit price: %value% (%max% for %maxValue%)\n
				Unit mass: %mass% (%max% for %maxMass%)
			</Text>
			<Text id="descItemStatsSingle">
				Unit price: %value%\n
				Unit mass: %mass%
			</Text>
			<Text id="descMarkup">
				Unit markup: %markup% (%markupPercent%%)
			</Text>
			<Text id="descDiscount">
				Unit discount: %discount% (%markupPercent%%)
			</Text>

			<Text id="errorNoItemsToSell">
				You have no items to sell to the station.
			</Text>
			<Text id="descNotForSale">
				%title% is not interested in buying %itemName%.
			</Text>
			<Text id="descNotEnoughMoney">
				%title% cannot afford to buy %itemName%.
			</Text>
			<Text id="descNotInterested">
				%title% is not interested in buying more %itemName%.
			</Text>
			<Text id="descBuyOnlyItem">
				%title% offers %currency% for your %itemName%.
			</Text>
			<Text id="descBuySingleItem">
				%title% offers %currency% for a single %itemName%.
			</Text>
			<Text id="descBuySomeItems">
				%title% offers %currency% for each %itemName% (up to a maximum of %offerCount%).
			</Text>
			<Text id="descBuyAllItems">
				%title% offers %currency% for each %itemName%.
			</Text>
			<Text id="descSellQuantity">
				How many items do you wish to sell at %value% each?
			</Text>

			<Text id="warningSellAmmo">
			
				%ItemName% are used by one of your weapons. Are you sure you 
				want to sell?

			</Text>
		</Language>
	</DockScreen>

<!-- GLOBALS -->

	<Globals>
		(block Nil
			(setq rpgBuyItem (lambda (theObj theItem thePrice theCurrency options)
				(block Nil
					; Add to player ship
                    (if (not (@ options 'noAddItem))
					    (objAddItem gPlayerShip theItem)
                        )
					
					; Record the transaction
					(objRecordBuyItem gPlayerShip theObj theItem theCurrency thePrice)
					
					; Remember that we've bought something, for tutorial 
					; purposes.
					(typSetData &svPlayer; 'tutorialBought True)
					)
				))
				
			(setq rpgBuyItems (lambda (itemCount itemCost)
				(block (itemsToBuy)
					(setq itemsToBuy (scrRemoveItem gScreen itemCount))
					(rpgBuyItem gSource itemsToBuy (multiply itemCount itemCost) (objGetDefaultCurrency gSource))
					)
				))

			(setq rpgCalcBuyPrice (lambda (thisItem)
				(objGetBuyPrice gSource thisItem)
				))

			(setq rpgCalcSellPrice (lambda (thisItem)
				(objGetSellPrice gSource thisItem)
				))

			(setq rpgCreateBuyItemTabs (lambda (criteria)
				(block (
					(theCriteria criteria)
					)
					(scrAddListFilter gScreen 'filterGeneral "General" (lambda (theItem)
						(switch
							(and theCriteria (not (itmMatches theItem theCriteria)))
								Nil

							(itmMatches theItem "adm")
								Nil
											
							(rpgCalcSellPrice theItem)
							)
						))
									
					(scrAddListFilter gScreen 'filterInstallable "Devices &amp; Armor" (lambda (theItem)
						(switch
							(and theCriteria (not (itmMatches theItem theCriteria)))
								Nil

							(itmMatches theItem "ad")
								(rpgCalcSellPrice theItem)
							)
						))
							
					(scrAddListFilter gScreen 'filterAmmo "Ammo" (lambda (theItem)
						(switch
							(and theCriteria (not (itmMatches theItem theCriteria)))
								Nil

							(itmMatches theItem "m")
								(rpgCalcSellPrice theItem)
							)
						))

					(if theCriteria							
						(scrAddListFilter gScreen 'filterAll "All" (lambda (theItem)
							(if (itmMatches theItem theCriteria)
									(rpgCalcSellPrice theItem)
								)
							))

						(scrAddListFilter gScreen 'filterAll "All" rpgCalcSellPrice)
						)
					)
				))

			(setq rpgSellItems (lambda (itemCount itemCost inventoryObj)
				(block (itemsToSell)
					(setq itemsToSell (scrRemoveItem gScreen itemCount))
					
					; Add to station
					(objAddItem (or inventoryObj gSource) itemsToSell)
					
					; Record transaction
					(objRecordBuyItem gSource gPlayerShip itemsToSell (objGetDefaultCurrency gSource) (* itemCount itemCost))
					
					; Remember that we've sold something, for tutorial 
					; purposes.
					(typSetData &svPlayer; 'tutorialSold True)
					)
				))
			)
	</Globals>

</TranscendenceModule>
