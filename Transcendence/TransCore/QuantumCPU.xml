<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

<!-- QUANTUM CPU -->

	<!-- Level 5: Quantum CPU -->

	<ItemType UNID="&itMnemonicProcessor;"
			name=				"Heisenmachines quantum CPU"
			attributes=			"commonwealth, heisenmachines, majorItem, quantumCPU"
			  
			level=				"5"
			frequency=			"uncommon"

			value=				"7500"
			mass=				"1000"
			  
			description=		"The Heisenmachines Corporation was the first commercial producer of quantum CPUs. Quantum CPUs are necessary for processing the instructions in a mnemonic memory cube."
			>

		<Image imageID="&rsItems1;" imageX="0" imageY="192" imageWidth="96" imageHeight="96"/>

		<MiscellaneousDevice
				powerUse=		"20"
				/>
	</ItemType>

<!-- PROGRAMS -->

	<!-- Level 5: Defective Shield Optimizer Cube -->

	<ItemType UNID="&itDefectiveShieldOptimizer;"
			name=				"ShieldOverdrive v1.0 algorithm cube"
			attributes=			"defective, info, minorItem, quantumProgram, shieldDamage"
			inherit=			"&baQuantumCPUShieldProgram;"

			level=				"5"
			frequency=			"rare"
			unknownType=		"&itUnknownMnemonicCube;"

			value=				"5"
			mass=				"50"
			useScreen=			"&dsRPGUseItemOnShields;"

			description=		"The first version of the ShieldOverdrive algorithm is promising but contains significant bugs."
			>

		<Properties>

			<!-- This property tells &baStdDeviceEnhancement; that we should
				enable the Use action even if the result might be noEffect. We 
				need this because the effect is random and not consistent 
				between canEnhance and onEnhance. -->

			<Definition id="rpg.alwaysAllowUse">True</Definition>

			<DynamicGlobal id="quantum.enhancement">
				;	This cube only works 50% of the time.

				(if (leq (random 1 100) 50)
					"+hpBonus:20"
					"-hpBonus:20"
					)
			</DynamicGlobal>

			<Definition id="quantum.minLevel">4</Definition>
			<Definition id="quantum.maxLevel">9</Definition>
			<Definition id="quantum.noRepair">True</Definition>
			<Definition id="quantum.repair">True</Definition>
		</Properties>

		<Image imageID="&rsItems1;" imageX="192" imageY="288" imageWidth="96" imageHeight="96"/>

		<Language>
			<Text id="rpg.useResultIntro">
				The cube runs a shield optimization program.
			</Text>

			<!-- We can't guarantee the outcome, so all possibilities use the
				same message. -->

			<Text id="rpg.canUse.ok">						You can run %useItem% on %dstItem%, but we cannot guarantee succeess.</Text>
			<Text id="rpg.canUse.alreadyEnhanced">			You can run %useItem% on %dstItem%, but we cannot guarantee succeess.</Text>
			<Text id="rpg.canUse.cantReplaceDefect">		You can run %useItem% on %dstItem%, but we cannot guarantee succeess.</Text>
			<Text id="rpg.canUse.cantReplaceEnhancement">	You can run %useItem% on %dstItem%, but we cannot guarantee succeess.</Text>
			<Text id="rpg.canUse.defectOK">					You can run %useItem% on %dstItem%, but we cannot guarantee succeess.</Text>
			<Text id="rpg.canUse.defectRemoved">			You can run %useItem% on %dstItem%, but we cannot guarantee succeess.</Text>
			<Text id="rpg.canUse.defectReplaced">			You can run %useItem% on %dstItem%, but we cannot guarantee succeess.</Text>
			<Text id="rpg.canUse.degraded">					You can run %useItem% on %dstItem%, but we cannot guarantee succeess.</Text>
			<Text id="rpg.canUse.enhancementRemoved">		You can run %useItem% on %dstItem%, but we cannot guarantee succeess.</Text>
			<Text id="rpg.canUse.enhancementReplaced">		You can run %useItem% on %dstItem%, but we cannot guarantee succeess.</Text>
			<Text id="rpg.canUse.improved">					You can run %useItem% on %dstItem%, but we cannot guarantee succeess.</Text>
			<Text id="rpg.canUse.noEffect">					You can run %useItem% on %dstItem%, but we cannot guarantee succeess.</Text>
		</Language>
	</ItemType>

	<!-- Level 5: Shield Optimizer Cube -->

	<ItemType UNID="&itShieldOptimizer;"
			name=				"ShieldOverdrive v3.1.8 algorithm cube"
			attributes=			"info, minorItem, quantumProgram, shieldEnhance"
			inherit=			"&baQuantumCPUShieldProgram;"

			level=				"5"
			frequency=			"uncommon"
			unknownType=		"&itUnknownMnemonicCube;"

			value=				"1000"
			mass=				"50"
			useScreen=			"&dsRPGUseItemOnShields;"

			description=		"This algorithm enhances shield generators of technology levels 4 through 9."
			>

		<Properties>
			<Definition id="quantum.enhancement">"+hpBonus:20"</Definition>
			<Definition id="quantum.minLevel">4</Definition>
			<Definition id="quantum.maxLevel">9</Definition>
			<Definition id="quantum.repair">True</Definition>
		</Properties>

		<Image imageID="&rsItems1;" imageX="192" imageY="288" imageWidth="96" imageHeight="96"/>

		<Language>
			<Text id="rpg.useResultIntro">
				The cube runs a shield optimization program.
			</Text>
		</Language>
	</ItemType>

	<!-- Level 6: Scramble Algorithm -->

	<ItemType UNID="&itScrambleAlgorithm;"
			name=				"Scramble1.5 algorithm cube"
			level=				"6"
			value=				"1000"
			mass=				"50"
			frequency=			"uncommon"
			unknownType=		"&itUnknownMnemonicCube;"
			attributes=			"consumable, info, quantumProgram"

			description=		"This algorithm hacks into near-by enemy ship computers and temporarily disable their control systems. Scramble1.5 requires a quantum CPU to execute."
			>

		<Image imageID="&rsItems1;" imageX="192" imageY="288" imageWidth="96" imageHeight="96"/>

		<Invoke key="S">
			(switch
				; If we don't have a quantum CPU
				(not (progHasQuantumCPU gSource))
					(objSendMessage gSource Nil "Quantum CPU required")

				; Otherwise, we paralyze enemy ships in the area
				(block (targets)
					(setq targets (sysFindObject gSource "sEN:16;"))
					(enum targets target
						(objProgramDamage target gSource "Scramble1.5" 6
							(objMakeParalyzed target (random 600 1200))
							)
						)
					(if targets
						(objSendMessage gSource Nil "Scramble1.5: Targets disabled")
						(objSendMessage gSource Nil "Scramble1.5: No targets in range")
						)

					(itmSetKnown gItem)
					(objRemoveItem gSource gItem 1)
					)
				)
		</Invoke>
	</ItemType>

	<!-- Level 6: Shield Power Saver Cube -->

	<ItemType UNID="&itShieldPowerSaver;"
			name=				"ShieldEfficiency v1.2.5 algorithm cube"
			attributes=			"info, minorItem, quantumProgram, shieldEnhance"
			inherit=			"&baQuantumCPUShieldProgram;"

			level=				"6"
			frequency=			"uncommon"
			unknownType=		"&itUnknownMnemonicCube;"

			value=				"1500"
			mass=				"50"
			useScreen=			"&dsRPGUseItemOnShields;"

			description=		"This algorithm increases the efficiency of shield generators of technology levels 4 through 9."
			>

		<Properties>
			<Definition id="quantum.enhancement">"+efficient:20"</Definition>
			<Definition id="quantum.minLevel">4</Definition>
			<Definition id="quantum.maxLevel">9</Definition>
			<Definition id="quantum.repair">True</Definition>
		</Properties>

		<Image imageID="&rsItems1;" imageX="192" imageY="288" imageWidth="96" imageHeight="96"/>

		<Language>
			<Text id="rpg.useResultIntro">
				The cube runs a shield optimization program.
			</Text>
		</Language>
	</ItemType>

<!-- BASE CLASSES -->

	<Type unid="&baQuantumCPUShieldProgram;"
			inherit="&baStdDeviceEnhancement;"
			>
		<Properties>
			<DynamicGlobal id="enhance.maxLevel">
				(typ@ gType 'quantum.maxLevel)
			</DynamicGlobal>

			<DynamicGlobal id="enhance.minLevel">
				(typ@ gType 'quantum.minLevel)
			</DynamicGlobal>

			<Definition id="rpg.useCriteria">"s"</Definition>
		</Properties>

		<Events>
			<CanUseOnItem>

				;	This event is called by dsRPGUseItemBase to figure out 
				;	whether to enable the Use button.
				;
				;	gSource: The object on which we are enhancing
				;	gItem: The item doing the enhancing
				;
				;	gData
				;		targetItem: The item being enhanced.
				;
				;	RETURN
				;		Nil: Cannot use on the item
				;
				;		descriptor:
				;			canUse: True/Nil
				;			desc: Explanation of what will happen if used
				;				(or why it cannot be used).

				(switch
					;	No Quantum CPU

					(not (progHasQuantumCPU gSource))
						{
							canUse: Nil
							desc: (typTranslate gType 'msgQuantumCPURequired)
							}

					;	Call base class

					(typFireObjItemEvent &baStdDeviceEnhancement; gSource gItem 'CanUseOnItem gData)
					)

			</CanUseOnItem>

			<GetEnhancement>

				;	Called from objCanEnhanceItem and objEnhanceItem. This is
				;	normally implemented by baStdDeviceEnhancement (which uses 
				;	rpg.enhancementTable), but we need some custom logic.
				;
				;	gSource: The object on which we are enhancing
				;	gItem: The item doing the enhancing
				;
				;	gData
				;		mode: Either 'canEnhance or 'onEnhance
				;		targetItem: The item being enhanced.
				;
				;	RETURN
				;		Nil: Cannot enhance target (no effect)
				;		'repair: Target item should be repaired
				;
				;		enhancement description:
				;			enhancement: Enhancement code/desc (required)
				;			lifetime: Duration of enhancement (ticks). Nil or -1
				;				means permanent.
				;			type: Item type of enhancement (only if different
				;				from gItem).
				;			desc: Explanation for result

				(block (
					(targetItem (@ gData 'targetItem))
					(trPrefix 
						(if (= (@ gData 'mode) 'canEnhance)
							"rpg.canUse."
							"rpg.useResult."
							)
						)
					(trData {
						useItem: (itmGetName gItem 'article)
						dstItem: (itmGetName targetItem 'noModifiers)
						})
					)
					(switch
						;	Must have a quantum CPU.
						;
						;	NOTE: The player UI does not get this far because it uses
						;	CanUseOnItem to get the message. But when using a cube
						;	programmatically (e.g., by the AI) then we need this check.

						(not (progHasQuantumCPU gSource))
							Nil

						;	Non-energy shields cannot be enhanced

						(itmMatches targetItem "s +nonEnergyShields")
							{
								enhancement: Nil
								desc: (typTranslate gType (cat trPrefix 'cannotEnhance) trData)
								}

						;	If the shield generator is not advanced enough, then nothing happens

						(ls (itmGetLevel targetItem) (typ@ gType 'quantum.minLevel))
							{
								enhancement: Nil
								desc: (typTranslate gType (cat trPrefix 'tooPrimitive) trData)
								}

						;	If the shield generator is too advanced, then nothing happens

						(gr (itmGetLevel targetItem) (typ@ gType 'quantum.maxLevel))
							{
								enhancement: Nil
								desc: (typTranslate gType (cat trPrefix 'tooAdvanced) trData)
								}

						;	If the item is damaged, we repair it

						(itmIsDamaged targetItem)
							(if (typ@ gType 'quantum.noRepair)
								{
									enhancement: Nil
									desc: (typTranslate gType (cat trPrefix 'cannotRepair) trData)
									}
								'repair
								)

						;	Shields enhanced

						{
							enhancement: (typ@ gType 'quantum.enhancement)
							}
						)
					)
			</GetEnhancement>
		</Events>

		<Language>
			<Text id="rpg.noTargetItem">					No shield generator installed.</Text>
			<Text id="rpg.noTargetItemUnknown">				This algorithm cube works on shield generators, but no appropriate device could be found.</Text>

			<Text id="rpg.canUse.cannotEnhance">			The algorithm cube only works on energy shields.</Text>
			<Text id="rpg.canUse.cannotRepair">				The %dstItem% is damaged and cannot be optimized by the algorithm cube.</Text>
			<Text id="rpg.canUse.tooAdvanced">				The %dstItem% is too advanced for the algorithm cube.</Text>
			<Text id="rpg.canUse.tooPrimitive">				The %dstItem% is too primitive for the algorithm cube.</Text>
			<Text id="rpg.canUse.unknown">					This algorithm cube works on shield generators. You can use it on %dstItem%.</Text>

			<Text id="rpg.useResult.cannotEnhance">			The program halts with an error: The %dstItem% is not an energy shield.</Text>
			<Text id="rpg.useResult.cannotRepair">			The program halts with an error: The %dstItem% is damaged and cannot be optimized.</Text>
			<Text id="rpg.useResult.defectOK">				The program halts with an error: qbit indeterminacy exception [#!800A410].</Text>
			<Text id="rpg.useResult.tooAdvanced">			The program halts with an error: The %dstItem% is too advanced.</Text>
			<Text id="rpg.useResult.tooPrimitive">			The program halts with an error: The %dstItem% is too primitive.</Text>

			<Text id="msgQuantumCPURequired">				You must install a quantum CPU on your ship before you can use a mnemonic cube.</Text>
		</Language>
	</Type>

<!-- GLOBALS -->

	<Globals>
		(block ()
			(setq progHasQuantumCPU (lambda (sourceObj)
				(switch
					;	An installed, enabled, undamaged device with the quantumCPU attribute
					;	or with a data variable named quantumCPU

					(filter (objGetItems sourceObj "*IN") theItem
							(and (objGetItemProperty sourceObj theItem 'enabled)
								(or (itmHasAttribute theItem 'quantumCPU)
									(itmGetData theItem 'quantumCPU)
									)
								)
							)
						True

					;	Otherwise, we don't have one.

					Nil
					)
				))
			)
	</Globals>

</TranscendenceModule>
