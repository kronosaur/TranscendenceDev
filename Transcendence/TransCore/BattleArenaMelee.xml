<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE TranscendenceModule
	[
	<!-- 0160-016F BATTLE ARENA TRACKS -->
	
	<!ENTITY muArenaSlicer					"0x00820160">
	<!ENTITY muArenaSurvivor				"0x00820161">
	<!ENTITY muArenaContender				"0x00820162">
	]>


<TranscendenceModule>

	<!-- Battle Arena Melee ====================================================

	EXTRA DATA

	status: One of the following:
		Nil:			Player is still alive
		playerKilled	Player has been killed (mission will fail when melee is over)
		playerLeft:		Player escaped from Arena

	======================================================================== -->
	
	<MissionType UNID="&msBattleArenaMelee;"
			name=				"Battle Arena 01: Melee"
			attributes=			"battleArena, arenaCombat"

			level=				"3"

			maxAppearing=		"5"
			>

		<Image imageID="&rsBattleArenaMissionTile;"	imageWidth="384" imageHeight="192"/>

		<Events>
			<OnCreate>
				(switch
					;	This mission only works in Rigel Aurelius
					(not (objHasAttribute aOwnerObj "battleArenaMaximus"))
						(msnDestroy gSource)

					;	Only for rookies
					(!= (typGetData &stBattleArena; 'arenaRank) 'rookie)
						(msnDestroy gSource)

					;	Set up the mission
					(block Nil
						;	Copy markerID
						(msnSetData gSource 'markerID (objGetData aOwnerObj 'markerID))

						;	No intro available
						(msnSetProperty gSource 'isIntroShown True)
						)
					)
			</OnCreate>

			<OnAccepted>
				(block (
					(arenaObj (objGetObjByID (msnGetProperty gSource 'ownerID)))
					(rookieScore (objGetData arenaObj 'rookieScore))
					(opponentCount (random 10 20))

					;	Find the ship classes to fight
					(melee1 (typFind "s +battleArena; +melee1"))
					(melee2 (typFind "s +battleArena; +melee2"))
					(meleeShips (map (make 'sequence opponentCount) i
							(if (geq (random 1 20) rookieScore)
								(random melee1)
								(random melee2)
								)
							))
					)
					(msnSetData gSource 'meleeShips meleeShips)
					
					(msnIncData gSource 'shipsLeft)

					(msnRegisterForEvents gSource gPlayerShip)
					(objSetData gPlayerShip 'battleArenaCombatant True)
					)
			</OnAccepted>

			<OnStarted>
				(block (
					(arenaObj (objGetObjByID (msnGetProperty gSource 'ownerID)))
					(targetPlayerChance 20)
					(offset 0)
					shipIDs
					)
					;	Create a bunch of ships and order them to attack
					(setq shipIDs (map (msnGetData gSource 'meleeShips) theClass
						(block (thisShip)
							(setq thisShip (sysCreateShip 
								theClass
								(sysVectorPolarOffset arenaObj (random 204 336) (+ 15 (* (modulo (setq offset (+ offset 1)) 12) 2)))
								&svGladiator;
								))
							(objSetData thisShip 'battleArenaCombatant True)

							;	Some ships attack the player, others attack the nearest target
							(if (leq (random 1 100) targetPlayerChance)
								(shpOrder thisShip 'attack gPlayerShip)
								)

							;	We add some command code to the ship so that it chooses a
							;	random gladiator target
							(shpSetCommandCode thisShip
								(block (
									(theArena (sysFindObject gSource "TN +battleArena;"))
									(targetList (sysFindObject gSource "sA N:150; D:battleArenaCombatant;"))
									)

									(if targetList
										(shpOrder gSource 'attack (random targetList))
										(shpOrder gSource 'dock theArena)
										)
									)
								)

							(msnRegisterForEvents gSource thisShip)
							(msnIncData gSource 'shipsLeft)
							(objSuspend thisShip)
							(objGetID thisShip)
							)
						))
					(msnSetData gSource 'meleeShips shipIDs)
					)
			</OnStarted>

			<OnAcceptedUndock>
				(block (
					(arenaObj (objGetObjByID (msnGetProperty gSource 'ownerID)))
					)
					;	Resume ships
					(enum (msnGetData gSource 'meleeShips) shipID (objResume (objGetObjByID shipID)))

					;	Prepare arena
					(bamDoorsClose arenaObj)

					;	Play Slicer track
					(uiSetSoundtrackMode 'missionStart &muArenaSlicer;)
					)
			</OnAcceptedUndock>

			<OnObjDestroyed>
				(block Nil
					;	Update the ship count
					(if (objGetData aObjDestroyed 'battleArenaCombatant)
						(msnIncData gSource 'shipsLeft -1)
						)

					(msnSetData gSource 'meleeShips (filter
						 (msnGetData gSource 'meleeShips)
						 shipID
						 (!= shipID (objGetID aObjDestroyed))
						 ))

					(switch
						;	If the player is destroyed then they cannot win.
						;	But we let the mission continue for now incase the
						;	player had insurance
						(= aObjDestroyed gPlayerShip)
							(block Nil
								(msnSetData gSource 'status 'playerKilled)
								(objSetData gPlayerShip 'battleArenaCombatant Nil)
								)

						;	If the ship left a wreck, then trash the items because we
						;	don't want the player to get too much loot from these wrecks
						aWreckObj
							(objEnumItems aWreckObj "dNU" theItem (block Nil
								(objRemoveItem aWreckObj theItem)
								(objAddItem aWreckObj (itmSetDamaged theItem True))
								))
						)

					(if (and (msnGetProperty gSource 'isActive) gPlayerShip (= aOrderGiver gPlayerShip))
						(msnIncData gSource 'score)
						)

					(switch
						;	Player has won, but failed to dock with Arena.
						;	Just open doors for now, but could set a draw condition later
						(msnGetProperty gSource 'isCompleted)
							(bamDoorsOpen)

						;	If only one ship is left and the player is alive, then they win
						(and (= (msnGetData gSource 'shipsLeft) 1) (not (msnGetData gSource 'status)))
							(msnSuccess gSource)

						;	If there are no ships left, then fail
						(= (msnGetData gSource 'shipsLeft) 0)
							(msnFailure gSource)
						)
					)
			</OnObjDestroyed>

			<OnObjEnteredGate>
				;	OnPlayerLeftSystem does not work for missions
				(if (= aObj gPlayerShip)
					(msnFailure gSource 'playerLeft)
					)
			</OnObjEnteredGate>

			<OnUpdate>
				;	Catch the case where player escapes without use of jump drive
				(if (gr (objGetDistance gPlayerShip (objGetObjByID (msnGetData gSource 'markerID))) 60)
					(msnFailure gSource 'playerLeft)
					)
			</OnUpdate>

			<OnPlayerResurrect>
				;	We don't know where the player will resurrect
				;	so just fail the mission and clean up
				(msnFailure gSource 'playerKilled)
			</OnPlayerResurrect>

			<OnObjDocked>
				(if (and (= (objGetID aDockTarget) (msnGetProperty gSource 'ownerID)) (!= aObjDocked gPlayerShip))
					;	If a non-player combatant docks then destory it to trigger the
					;	failure condition (we end the mission when there are no	ships
					;	left becuase there is not always a survivor).
					(objDestroy aObjDocked)
					)
			</OnObjDocked>

			<OnCompleted>
				(block (
					(arenaObj (objGetObjByID (msnGetProperty gSource 'ownerID)))
					)
					(switch
						(= aReason 'success)
							(block Nil
								(objIncData arenaObj 'rookieScore (msnGetData gSource 'score))
								(msnSetData gSource 'reward (* (msnGetData gSource 'score) 25))

								;	Back to travel music (we're still technically in combat, because we
								;	haven't detected that we're out yet, so we force travel mode).
								(uiQueueSoundtrack (if (geq (objGetData arenaObj 'rookieScore) 20) &muArenaContender; &muArenaSurvivor;))
								(uiSetSoundtrackMode 'missionEndTravel)
								)

						(and (= aReason 'failure) (= gData 'playerLeft))
							(block Nil
								(typSetData &stBattleArena; 'arenaRank 'coward)
								(msnSetData gSource 'status 'playerLeft)
								)

						(= aReason 'failure)
							(msnSetData gSource 'status 'playerKilled)
						)

					(objSetData gPlayerShip 'battleArenaCombatant Nil)

					;	Clean up any ships that are left
					(enum (msnGetData gSource 'meleeShips) shipID
						(block Nil
							(objUnregisterForEvents gSource (objGetObjByID shipID))
							(objDestroy (objGetObjByID shipID))
							)
						)
					;	Open arena doors
					(if (!= aReason 'success) (bamDoorsOpen arenaObj))
					)
			</OnCompleted>

			<OnDebriefed>
				(bamDoorsOpen arenaObj)
			</OnDebriefed>

			<OnReward>
				(block (
					(arenaObj (objGetObjByID (msnGetProperty gSource 'ownerID)))
					(totalScore (objGetData arenaObj 'rookieScore))
					)
					;	Pay the player
					(rpgMissionRewardPayment (msnGetData gSource 'reward))

					; If the player has defeated enough enemies, then he is a gladiator
					(if (geq totalScore 20)
						(block Nil
							(objSetGlobalData arenaObj 'arenaRank 'gladiator)
							(objSetGlobalData arenaObj 'arenaRep 0)
							(objSetGlobalData arenaObj 'arenaSkill 200)
							(objSetData arenaObj 'matchCount 0)
							(objSetData arenaObj 'results '(0 0 0 0))

							(unvSetAchievement 'humanSpace.gladiator)
							)
						)
					)
			</OnReward>
		</Events>
		
		<Language>
			<Text id="Name">
				Battle Arena Melee
			</Text>
			<Text id="Summary">
				(msnTranslate gSource 'textSummary {
					systemName: (sysGetName)
					payment: (fmtCurrency 'credit (msnGetData gSource 'reward))
					})
			</Text>
			<Text id="textSummary">
				You have entered the Battle Arena Maximus as a contestant.
				Prove your worth by surviving the Melee.

				System: %systemName%\n
				Payment: 25 credits per kill
			</Text>
			<Text id="Briefing">
				(block (
					(arenaObj (objGetObjByID (msnGetProperty gSource 'ownerID)))
					(meleeCount (count (msnFind arenaObj "*S unid:&msBattleArenaMelee;;")))
					(totalScore (objGetData arenaObj 'rookieScore))
					(shipsLeft (if (= totalScore 19)
							"one more ship"
							(cat (- 20 totalScore) " more ships")
							))
					)
					(switch
						(= meleeCount 5)
							(msnTranslate gSource 'Briefing.lastChance { shipsLeft:shipsLeft })

						(= meleeCount 1)
							(msnTranslate gSource 'Briefing.firstTime { shipsLeft:shipsLeft })

						(leq totalScore 15)
							(msnTranslate gSource 'Briefing.standard { shipsLeft:shipsLeft })

						(msnTranslate gSource 'Briefing.nearlyThere { shipsLeft:shipsLeft })
						)
					)
			</Text>
			<Text id="Briefing.lastChance">

				"I don't know if you have the killer instincts to be a gladiator.
				I'll make you a deal: if you can destroy %shipsLeft%
				in this next melee then I'll make you a gladiator. OK?"

			</Text>
			<Text id="Briefing.firstTime">

				"A rookie from the provinces, eh? No sense in wasting a gladiator's time
				on you. Prove yourself by surviving a melee and then we'll see. Deal?"

			</Text>
			<Text id="Briefing.standard">

				"A little more practice won't hurt you. Survive a melee and we'll pay
				you 25 credits for every opponent you kill."

			</Text>
			<Text id="Briefing.nearlyThere">

				"Your skills have improved greatly. Kill %shipsLeft%
				in a melee and you will become a gladiator!"

			</Text>
			<Text id="AcceptLabel">[F]ight!</Text>
			<Text id="DeclineLabel">[B]ack Out</Text>
			<String id="AcceptReply">
				"Good Luck!"
			</String>
			<String id="DeclineReply">
				"This kind of challenge is not for the weak and fearful. You are wise to decline."
			</String>
			<String id="InProgress">
				"We're still in the middle of a match! Come back later."
			</String>
			<Text id="FailureDebrief">
				(if (= (msnGetData gSource 'status) 'playerLeft)
					(msnTranslate gSource 'descPlayerLeft)
					(msnTranslate gSource 'descMeleeLoser)
					)
			</Text>
			<Text id="descMeleeLoser">

				"Are you sure you want to be a gladiator? You don't seem very good in the Arena.
				Oh well, at least your death will be a good appetizer for the crowd."

			</Text>
			<String id="descPlayerLeft">

				"You're banned from the games for leaving the arena in the middle of battle!"

			</String>
			<Text id="SuccessDebrief">
				(block (
					(arenaObj (objGetObjByID (msnGetProperty gSource 'ownerID)))
					(totalScore (objGetData arenaObj 'rookieScore))
					(meleeScore (msnGetData gSource 'score))
					(subs { score:meleeScore reward:(fmtCurrency 'credit (msnGetData gSource 'reward))})
					)
					(switch
						(geq totalScore 20)
							(msnTranslate gSource 'Winner.gladiator subs)

						(eq meleeScore 0)
							(msnTranslate gSource 'Winner.0 subs)

						(eq meleeScore 1)
							(msnTranslate gSource 'Winner.1 subs)

						(and (leq meleeScore 3) (leq totalScore 8))
							(msnTranslate gSource 'Winner.2 subs)

						(leq meleeScore 8)
							(msnTranslate gSource 'Winner.3 subs)

						(leq meleeScore 11)
							(msnTranslate gSource 'Winner.4 subs)

						(msnTranslate gSource 'Winner.5 subs)
						)
					)
			</Text>
			<String id="Winner.gladiator">
				"Congratulations, you've proven yourself in the Arena. You may now call yourself a gladiator."
			</String>
			<String id="Winner.0">
				"You didn't even kill a single opponent! You'll never be a gladiator at that rate!"
			</String>
			<Text id="Winner.1">

				"Looks like you're better at running away than killing!
				For killing a single opponent, we award you %reward%."

			</Text>
			<Text id="Winner.2">

				"Hiding in a corner is not what the Arena is all about!
				We've deposited %reward% in your account, but
				you'll have to do better if you want to be a gladiator."

			</Text>
			<Text id="Winner.3">

				"You fight well for a rookie! You survived the melee and destroyed
				%score% opponents. We've deposited %reward%
				in your account."

			</Text>
			<Text id="Winner.4">

				"Your skills are impressive! You will make a fine gladiator soon.
				For killing %score% opponents we have deposited
				%reward% in your account."

			</Text>
			<Text id="Winner.5">

				"You are a killing machine! For slaughtering %score%
				opponents, we award you %reward%."

			</Text>

			<Text id="SuccessMsg">Victory!</Text>
		</Language>
	</MissionType>

</TranscendenceModule>
