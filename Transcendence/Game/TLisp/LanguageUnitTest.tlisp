;	LanguageUnitTest.tlisp
;
;	Regression tests for language operations
;	Copyright (c) 2017 by Kronosaur Productions, LLC. All Rights Reserved

(setq TEST_SUITE (list

	;	fmtCompose

	{	code: '(fmtCompose "Test")							result: "Test"	}

	{	code: '(fmtCompose "%test%")						result: "%test%"	}
	{	code: '(fmtCompose "Test %test%")					result: "Test %test%"	}
	{	code: '(fmtCompose "Test %test% TEST")				result: "Test %test% TEST"	}
	{	code: '(fmtCompose "Test%test%TEST")				result: "Test%test%TEST"	}
	{	code: '(fmtCompose "%test%" { test:'foo })			result: "foo"	}
	{	code: '(fmtCompose "Test %test%" { test:'foo })		result: "Test foo"	}
	{	code: '(fmtCompose "Test%test%TEST" { test:'foo })	result: "TestfooTEST"	}

	{	code: '(fmtCompose "Test % TEST")					result: "Test % TEST"	}
	{	code: '(fmtCompose "% TEST")						result: "% TEST"	}
	{	code: '(fmtCompose "TEST %")						result: "TEST %"	}
	{	code: '(fmtCompose "%")								result: "%"	}
	{	code: '(fmtCompose "%test%%" { test:'foo })			result: "foo%"	}
	{	code: '(fmtCompose "%%test%%" { test:'foo })		result: "%test%"	}

	{	code: '(fmtCompose "%he:gender% is testing" { gender:'humanMale })	result: "he is testing"	}
	{	code: '(fmtCompose "%he:gender% is testing" { gender:'humanFemale })	result: "she is testing"	}

	{	code: '(fmtCompose "% test %" { test:'foo })		result: "% test %"	}
	{	code: '(fmtCompose "% test: test %" { test:'foo })	result: "% test: test %"	}

	;	For backwards compatibility, a double percent is translated to a single
	;	percent. But in practice, you should use a single percent where needed.

	{	code: '(fmtCompose "%%")							result: "%"	}

	;	strCapitalize

	{	code: '(strCapitalize "test")						result: "Test"	}
	{	code: '(strCapitalize "this is a test")				result: "This is a test"	}
	{	code: '(strCapitalize "")							result: ""	}
	{	code: '(strCapitalize Nil)							result: ""	}

	;	Subset

	{	code: '(subset 'abcd 2)							result: 'cd}
	{	code: '(subset 'abcd 1 2)						result: 'bc}
	{	code: '(subset 'abcd -3 2)						result: 'ab}
	{	code: '(subset 'abcd -3 2 '-)					result: 'bc}
	{	code: '(subset 'abcd 5)							result: Nil}
	{	code: '(subset 'abcd 5 'empty)					result: ""}

	;	Slice
	
	{	code: '(slice 'abcd 2)							result: 'cd}
	{	code: '(slice 'abcdef 2 3)						result: 'cd}
	{	code: '(slice 'abcdef -4 -2)					result: 'cde}
	{	code: '(slice 'abcd 10 12)						result: ""}
	{	code: '(slice 'abcd 2 1)						result: ""}

	;	strBeginsWith

	{	code: '(strBeginsWith 'abcd 'ab)				result:	True}
	{	code: '(strBeginsWith 'abcd 'cd)				result:	Nil}
	{	code: '(strEndsWith 'abcd 'Ab 'case)			result:	Nil}

	;	strEndsWith

	{	code: '(strEndsWith 'abcd 'ab)					result:	Nil}
	{	code: '(strEndsWith 'abcd 'cd)					result:	True}
	{	code: '(strEndsWith 'abcd 'cD 'case)			result:	Nil}

	;	strCount

	{	code: '(strCount 'abcd 'ab)						result:	1}
	{	code: '(strCount 'abcd 'cd)						result:	1}
	{	code: '(strCount 'abcdcd 'cd)					result:	2}
	{	code: '(strCount 'abcDCd 'cd)					result:	2}
	{	code: '(strCount 'abcd 'x)						result:	0}
	{	code: '(strCount 'abcd 'aB 'case)				result:	0}
	{	code: '(strCount 'abcDCd 'cd 'case)				result:	0}

	;	strFind

	{	code: '(strFind 'abcd 'ab)						result:	0}
	{	code: '(strFind 'abcd 'cd)						result:	2}
	{	code: '(strFind 'abcdcd 'cd)					result:	2}
	{	code: '(strFind 'abcd 'x)						result:	Nil}
	{	code: '(strFind 'abcd 'aB 'case)				result:	Nil}
	{	code: '(strFind 'abCd 'Cd 'case)				result:	2}

	;	strFindAll

	{	code: '(strFindAll 'abcd 'ab)					result:	'(0)}
	{	code: '(strFindAll 'abcd 'cd)					result:	'(2)}
	{	code: '(strFindAll 'abcdcd 'cd)					result:	'(2 4)}
	{	code: '(strFindAll 'abcd 'x)					result:	Nil}
	{	code: '(strFindAll 'abcd 'aB 'case)				result:	Nil}
	{	code: '(strFindAll 'abCd 'Cd 'case)				result:	'(2)}

	;	strReplace

	{	code: '(strReplace "Xx---XX---xX---XXX" "XX" "!!!")			result: "!!!---!!!---!!!---!!!X"}
	{	code: '(strReplace "Xx---XX---xX---XXXX" "XX" "!!!")		result: "!!!---!!!---!!!---!!!!!!"}
	{	code: '(strReplace "Xx---XX---xX---XXX" "XX" "!!!" 'case)	result: "Xx---!!!---xX---!!!X"}
	{	code: '(strReplace "Xx---XX---xX---X" "XX" "!!!" 'case)		result: "Xx---!!!---xX---X"}

	;	strStrip

	{	code: '(strStrip "    \t   AAA \t\t")			result:	'AAA}
	{	code: '(strStrip "    \t   AAA \t\tX")			result: "AAA \t\tX"}
	{	code: '(strStrip "   X\t   AAA X\t\t")			result:	"X\t   AAA X"}
	{	code: '(strStrip "aaAABBBaaAA" "a" 'case)		result: "AABBBaaAA"}
	{	code: '(strStrip "aaAABBBaaAA" "a")				result: "BBB"}

	;	strSplit

	{	code: '(strSplit "a,b,c,d,e,," ",")				result: '("a" "b" "c" "d" "e" "" "")}
	{	code: '(strSplit "aabacadaeaa" "a")				result: '("" "" "b" "c" "d" "e" "" "")}
	{	code: '(strSplit "aAbacadaeaA" "a" 'case)		result: '("" "Ab" "c" "d" "e" "A")}

	))

(debugUnitTest "Language Unit Test" TEST_SUITE)

