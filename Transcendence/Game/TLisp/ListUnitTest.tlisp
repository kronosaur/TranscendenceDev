;	ListUnitTest.tlisp
;
;	Regression tests for list operations
;	Copyright (c) 2017 by Kronosaur Productions, LLC. All Rights Reserved

(setq TEST_SUITE (list

	;	Map

	{	code: '(map Nil theEntry theEntry)							result: Nil	}
	{	code: '(map (list 1 2 3) theEntry (+ 1 theEntry))			result: '(2 3 4)	}

	;	Map of structs

	{	code: '(map { a:1 b:2 c:3 } theEntry theEntry)			result: '((a 1) (b 2) (c 3))	}

	;	Reduce unique

	{	code: '(map (list 3 1 2 3 3 5) 'reduceUnique theEntry theEntry)
		result: '(1 2 3 5)	}

	{	code: '(map (list { a:1 } { a:2 } { a:3 } { a:1 }) 'reduceUnique theEntry (@ theEntry 'a))
		result: '(1 2 3)	}

	{	code: '(map (list { a:1 } { a:2 } { a:3 } { a:1 }) '(reduceUnique original) theEntry (@ theEntry 'a))
		result: '({ a:1 } { a:2} { a: 3})	}

	;	Make Sequence

	{	code: '(make 'sequence)									result: Nil	}
	{	code: '(make 'sequence 0)								result: Nil	}
	{	code: '(make 'sequence 1)								result: '(1)	}
	{	code: '(make 'sequence 1 10)							result: '(1 2 3 4 5 6 7 8 9 10)	}
	{	code: '(make 'sequence 10 1)							result: '(10 9 8 7 6 5 4 3 2 1)	}
	{	code: '(make 'sequence -5 0)							result: '(-5 -4 -3 -2 -1 0)	}
	{	code: '(make 'sequence -5 -10)							result: '(-5 -6 -7 -8 -9 -10)	}
	{	code: '(make 'sequence 10 10)							result: '(10)	}
	{	code: '(make 'sequence -10 -10)							result: '(-10)	}
	{	code: '(make 'sequence 1 10 1)							result: '(1 2 3 4 5 6 7 8 9 10)	}
	{	code: '(make 'sequence 1 10 2)							result: '(1 3 5 7 9)	}
	{	code: '(make 'sequence 1 10 -1)							result: Nil	}
	{	code: '(make 'sequence 10 1 1)							result: Nil	}
	{	code: '(make 'sequence 10 1 -1)							result: '(10 9 8 7 6 5 4 3 2 1)	}
	{	code: '(make 'sequence 10 1 -2)							result: '(10 8 6 4 2)	}
	{	code: '(make 'sequence 10 1 -20)						result: '(10)	}

	;	Subset

	{	code: '(subset (list 1 2 3 4) 2)						result: '(3 4)}
	{	code: '(subset (list 1 2 3 4) 1 2)						result: '(2 3)}
	{	code: '(subset (list 1 2 3 4) -3 2)						result: '(1 2)}
	{	code: '(subset (list 1 2 3 4) -3 2 '-)					result: '(2 3)}
	{	code: '(subset (list 1 2 3 4) 5)						result: Nil}
	{	code: '(subset (list 1 2 3 4) 5 5)						result: Nil}
	{	code: '(subset (list 1 2 3 4) 2 5)						result: '(3 4)}
	{	code: '(subset (list 1 2 3 4) -2 5 '-)					result: '(3 4)}
	{	code: '(subset (list 1 2 3 4) 5 'empty)					result: '()}
	{	code: '(subset (list 1 2 3 4) 5 5 'empty)				result: '()}
	{	code: '(subset (list 1 2 3 4) 5 5 'empty '-)			result: '()}

	;	Slice
	
	{	code: '(slice (list 1 2 3 4) 2)							result: '(3 4)}
	{	code: '(slice (list 1 2 3 4 5 6) 2 3)					result: '(3 4)}
	{	code: '(slice (list 1 2 3 4 5 6) -4 -2)					result: '(3 4 5)}
	{	code: '(slice (list 1 2 3 4) 10 12)						result: '()}
	{	code: '(slice (list 1 2 3 4) 2 1)						result: '()}
	{	code: '(slice (list 1 2 3 4) 2 5)						result: '(3 4)}

	))

(debugUnitTest "List Unit Test" TEST_SUITE)
